"use client";

import { useState, useEffect } from "react";
import Link from "next/link";

interface WeatherData {
  temperature: number;
  condition: string;
  location: string;
  humidity: number;
  windSpeed: number;
  icon: string;
}

export default function WeatherWidget() {
  const [weather, setWeather] = useState<WeatherData | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [useDemo, setUseDemo] = useState(false);

  const demoWeatherData: WeatherData = {
    temperature: 22,
    condition: "–°–æ–ª–Ω–µ—á–Ω–æ",
    location: "–ê–ª–º–∞—Ç—ã, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
    humidity: 45,
    windSpeed: 12,
    icon: "‚òÄÔ∏è"
  };

  const getLocationAndWeather = async () => {
    setLoading(true);
    setError(null);

    try {
      if (!navigator.geolocation) {
        throw new Error("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º");
      }

      const position = await new Promise<GeolocationPosition>((resolve, reject) => {
        navigator.geolocation.getCurrentPosition(resolve, reject, {
          timeout: 10000,
          enableHighAccuracy: true
        });
      });

      const { latitude, longitude } = position.coords;
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API –ø–æ–≥–æ–¥—ã
      // –ù–∞–ø—Ä–∏–º–µ—Ä: OpenWeatherMap, WeatherAPI –∏ —Ç.–¥.
      // const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric&lang=ru`);
      
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ MVP –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
      setTimeout(() => {
        const mockWeatherData: WeatherData = {
          temperature: Math.round(Math.random() * 30 + 5), // 5-35¬∞C
          condition: ["–°–æ–ª–Ω–µ—á–Ω–æ", "–û–±–ª–∞—á–Ω–æ", "–î–æ–∂–¥—å", "–°–Ω–µ–≥", "–¢—É–º–∞–Ω"][Math.floor(Math.random() * 5)],
          location: `–®–∏—Ä–æ—Ç–∞: ${latitude.toFixed(2)}, –î–æ–ª–≥–æ—Ç–∞: ${longitude.toFixed(2)}`,
          humidity: Math.round(Math.random() * 50 + 30), // 30-80%
          windSpeed: Math.round(Math.random() * 20 + 5), // 5-25 –∫–º/—á
          icon: ["‚òÄÔ∏è", "‚õÖ", "üåßÔ∏è", "‚ùÑÔ∏è", "üå´Ô∏è"][Math.floor(Math.random() * 5)]
        };
        
        setWeather(mockWeatherData);
        setLoading(false);
      }, 1500);

    } catch (error: any) {
      setError(error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ");
      setLoading(false);
    }
  };

  const loadDemoData = () => {
    setUseDemo(true);
    setWeather(demoWeatherData);
    setError(null);
  };

  const getWeatherIcon = (condition: string) => {
    const icons: { [key: string]: string } = {
      "–°–æ–ª–Ω–µ—á–Ω–æ": "‚òÄÔ∏è",
      "–û–±–ª–∞—á–Ω–æ": "‚õÖ",
      "–î–æ–∂–¥—å": "üåßÔ∏è",
      "–°–Ω–µ–≥": "‚ùÑÔ∏è",
      "–¢—É–º–∞–Ω": "üå´Ô∏è"
    };
    return icons[condition] || "üå§Ô∏è";
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-400 via-blue-500 to-blue-600 dark:from-slate-800 dark:via-slate-900 dark:to-black">
      <div className="container mx-auto px-4 py-8 max-w-lg">
        {/* Header */}
        <header className="text-center mb-8">
          <Link 
            href="/"
            className="inline-flex items-center text-sm text-white/80 hover:text-white mb-4"
          >
            ‚Üê –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º
          </Link>
          <h1 className="text-3xl font-bold text-white mb-2">
            –í–∏–¥–∂–µ—Ç –ü–æ–≥–æ–¥—ã MVP
          </h1>
          <p className="text-blue-100">
            –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
          </p>
        </header>

        {/* MVP Info */}
        <div className="bg-white/10 backdrop-blur-md rounded-lg p-4 mb-6 border border-white/20">
          <h3 className="font-medium text-white mb-2">MVP —Ñ—É–Ω–∫—Ü–∏—è:</h3>
          <p className="text-sm text-blue-100">
            –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ —É—Å–ª–æ–≤–∏–π –ø–æ–≥–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          </p>
        </div>

        {/* Weather Widget */}
        <div className="bg-white/10 backdrop-blur-md rounded-2xl shadow-2xl p-6 border border-white/20">
          {!weather && !loading && (
            <div className="text-center">
              <div className="text-6xl mb-4">üå§Ô∏è</div>
              <h3 className="text-xl font-semibold text-white mb-4">
                –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
              </h3>
              <p className="text-blue-100 mb-6 text-sm">
                –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ
              </p>
              <div className="space-y-3">
                <button
                  onClick={getLocationAndWeather}
                  className="w-full bg-white text-blue-600 py-3 px-6 rounded-lg font-medium hover:bg-blue-50 transition-colors duration-200"
                >
                  –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                </button>
                <button
                  onClick={loadDemoData}
                  className="w-full bg-blue-500/50 text-white py-2 px-6 rounded-lg font-medium hover:bg-blue-500/70 transition-colors duration-200"
                >
                  –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
                </button>
              </div>
            </div>
          )}

          {loading && (
            <div className="text-center py-8">
              <div className="animate-spin text-4xl mb-4">üå™Ô∏è</div>
              <p className="text-white">–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ...</p>
            </div>
          )}

          {error && (
            <div className="text-center py-8">
              <div className="text-4xl mb-4">‚ùå</div>
              <p className="text-red-200 mb-4">{error}</p>
              <button
                onClick={loadDemoData}
                className="bg-white text-blue-600 py-2 px-4 rounded-lg font-medium hover:bg-blue-50 transition-colors duration-200"
              >
                –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
              </button>
            </div>
          )}

          {weather && (
            <div className="text-center">
              {useDemo && (
                <div className="bg-yellow-500/20 text-yellow-100 text-xs px-3 py-1 rounded-full mb-4 inline-block">
                  –î–µ–º–æ —Ä–µ–∂–∏–º
                </div>
              )}
              
              <div className="text-6xl mb-4">{weather.icon}</div>
              
              <h2 className="text-3xl font-bold text-white mb-2">
                {weather.temperature}¬∞C
              </h2>
              
              <p className="text-xl text-blue-100 mb-4">
                {weather.condition}
              </p>
              
              <p className="text-sm text-blue-200 mb-6">
                üìç {weather.location}
              </p>

              {/* Weather Details */}
              <div className="grid grid-cols-2 gap-4 mb-6">
                <div className="bg-white/5 rounded-lg p-3">
                  <div className="text-2xl mb-1">üíß</div>
                  <div className="text-xs text-blue-200">–í–ª–∞–∂–Ω–æ—Å—Ç—å</div>
                  <div className="text-lg font-semibold text-white">{weather.humidity}%</div>
                </div>
                <div className="bg-white/5 rounded-lg p-3">
                  <div className="text-2xl mb-1">üí®</div>
                  <div className="text-xs text-blue-200">–í–µ—Ç–µ—Ä</div>
                  <div className="text-lg font-semibold text-white">{weather.windSpeed} –∫–º/—á</div>
                </div>
              </div>

              <button
                onClick={() => {
                  setWeather(null);
                  setUseDemo(false);
                  setError(null);
                }}
                className="w-full bg-white/20 text-white py-2 px-4 rounded-lg font-medium hover:bg-white/30 transition-colors duration-200"
              >
                –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
              </button>
            </div>
          )}
        </div>

        {/* Tech Info */}
        <div className="mt-8 text-center">
          <p className="text-xs text-blue-200">
            –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: Geolocation API, React Hooks, TypeScript, Tailwind CSS
          </p>
          <p className="text-xs text-blue-300 mt-1">
            * –í production –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π API –ø–æ–≥–æ–¥—ã
          </p>
        </div>
      </div>
    </div>
  );
}
