"use client";

import { useState, useEffect, useCallback, useMemo } from "react";
import Link from "next/link";

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã
interface MenuItem {
  id: string;
  name: string;
  description: string;
  price: number;
  image: string;
  category: string;
  rating: number;
  preparationTime: number;
  isVegetarian: boolean;
  isSpicy: boolean;
  isPopular: boolean;
  allergies: string[];
}

interface Restaurant {
  id: string;
  name: string;
  description: string;
  image: string;
  cuisine: string;
  rating: number;
  deliveryTime: string;
  deliveryFee: number;
  minimumOrder: number;
  isOpen: boolean;
  categories: string[];
  menu: MenuItem[];
  reviews: Review[];
  location: string;
  phone: string;
}

interface CartItem {
  menuItem: MenuItem;
  quantity: number;
  specialInstructions?: string;
  restaurantId: string;
}

interface Review {
  id: string;
  userName: string;
  rating: number;
  comment: string;
  date: string;
  orderItems: string[];
}

interface Order {
  id: string;
  restaurantId: string;
  items: CartItem[];
  total: number;
  status: 'preparing' | 'ready' | 'delivering' | 'delivered';
  orderTime: Date;
  estimatedDelivery: Date;
  customerInfo: {
    name: string;
    phone: string;
    address: string;
  };
  paymentMethod: string;
  deliveryInstructions?: string;
}

// –î–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∏ –º–µ–Ω—é
const restaurantsData: Restaurant[] = [
  {
    id: "burger-palace",
    name: "üçî Burger Palace",
    description: "–õ—É—á—à–∏–µ –±—É—Ä–≥–µ—Ä—ã –≤ –≥–æ—Ä–æ–¥–µ —Å —Å–æ—á–Ω–æ–π –≥–æ–≤—è–¥–∏–Ω–æ–π –∏ —Å–≤–µ–∂–∏–º–∏ –æ–≤–æ—â–∞–º–∏",
    image: "üçî",
    cuisine: "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è",
    rating: 4.8,
    deliveryTime: "25-35 –º–∏–Ω",
    deliveryFee: 150,
    minimumOrder: 500,
    isOpen: true,
    location: "—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, 123",
    phone: "+7 (999) 123-45-67",
    categories: ["–ë—É—Ä–≥–µ—Ä—ã", "–ó–∞–∫—É—Å–∫–∏", "–ù–∞–ø–∏—Ç–∫–∏", "–î–µ—Å–µ—Ä—Ç—ã"],
    menu: [
      {
        id: "classic-burger",
        name: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±—É—Ä–≥–µ—Ä",
        description: "–°–æ—á–Ω–∞—è –≥–æ–≤—è–∂—å—è –∫–æ—Ç–ª–µ—Ç–∞, —Å–∞–ª–∞—Ç, –ø–æ–º–∏–¥–æ—Ä, –ª—É–∫, —Å—ã—Ä —á–µ–¥–¥–µ—Ä",
        price: 390,
        image: "üçî",
        category: "–ë—É—Ä–≥–µ—Ä—ã",
        rating: 4.9,
        preparationTime: 15,
        isVegetarian: false,
        isSpicy: false,
        isPopular: true,
        allergies: ["–≥–ª—é—Ç–µ–Ω", "–º–æ–ª–æ–∫–æ"]
      },
      {
        id: "cheese-burger",
        name: "–ß–∏–∑–±—É—Ä–≥–µ—Ä –î–µ–ª—é–∫—Å",
        description: "–î–≤–æ–π–Ω–∞—è –∫–æ—Ç–ª–µ—Ç–∞, –¥–≤–æ–π–Ω–æ–π —Å—ã—Ä, –±–µ–∫–æ–Ω, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–æ—É—Å",
        price: 520,
        image: "üßÄ",
        category: "–ë—É—Ä–≥–µ—Ä—ã",
        rating: 4.7,
        preparationTime: 18,
        isVegetarian: false,
        isSpicy: false,
        isPopular: true,
        allergies: ["–≥–ª—é—Ç–µ–Ω", "–º–æ–ª–æ–∫–æ"]
      },
      {
        id: "veggie-burger",
        name: "–í–µ–≥–≥–∏ –±—É—Ä–≥–µ—Ä",
        description: "–ö–æ—Ç–ª–µ—Ç–∞ –∏–∑ –Ω—É—Ç–∞ –∏ –æ–≤–æ—â–µ–π, –∞–≤–æ–∫–∞–¥–æ, —Å–∞–ª–∞—Ç, –≤–µ–≥–∞–Ω—Å–∫–∏–π —Å–æ—É—Å",
        price: 350,
        image: "ü•¨",
        category: "–ë—É—Ä–≥–µ—Ä—ã",
        rating: 4.5,
        preparationTime: 12,
        isVegetarian: true,
        isSpicy: false,
        isPopular: false,
        allergies: ["–≥–ª—é—Ç–µ–Ω"]
      },
      {
        id: "fries",
        name: "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏",
        description: "–•—Ä—É—Å—Ç—è—â–∏–π –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å —Å –º–æ—Ä—Å–∫–æ–π —Å–æ–ª—å—é",
        price: 180,
        image: "üçü",
        category: "–ó–∞–∫—É—Å–∫–∏",
        rating: 4.6,
        preparationTime: 8,
        isVegetarian: true,
        isSpicy: false,
        isPopular: true,
        allergies: []
      },
      {
        id: "onion-rings",
        name: "–õ—É–∫–æ–≤—ã–µ –∫–æ–ª—å—Ü–∞",
        description: "–•—Ä—É—Å—Ç—è—â–∏–µ –∫–æ–ª—å—Ü–∞ –ª—É–∫–∞ –≤ –ø–∞–Ω–∏—Ä–æ–≤–∫–µ",
        price: 220,
        image: "üßÖ",
        category: "–ó–∞–∫—É—Å–∫–∏",
        rating: 4.4,
        preparationTime: 10,
        isVegetarian: true,
        isSpicy: false,
        isPopular: false,
        allergies: ["–≥–ª—é—Ç–µ–Ω"]
      },
      {
        id: "cola",
        name: "–ö–æ–ª–∞",
        description: "–û—Å–≤–µ–∂–∞—é—â–∏–π –≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫",
        price: 120,
        image: "ü•§",
        category: "–ù–∞–ø–∏—Ç–∫–∏",
        rating: 4.2,
        preparationTime: 2,
        isVegetarian: true,
        isSpicy: false,
        isPopular: true,
        allergies: []
      },
      {
        id: "milkshake",
        name: "–ú–æ–ª–æ—á–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å",
        description: "–í–∞–Ω–∏–ª—å–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å —Å –≤–∑–±–∏—Ç—ã–º–∏ —Å–ª–∏–≤–∫–∞–º–∏",
        price: 250,
        image: "ü•õ",
        category: "–ù–∞–ø–∏—Ç–∫–∏",
        rating: 4.8,
        preparationTime: 5,
        isVegetarian: true,
        isSpicy: false,
        isPopular: true,
        allergies: ["–º–æ–ª–æ–∫–æ"]
      }
    ],
    reviews: [
      {
        id: "rev1",
        userName: "–ê–ª–µ–∫—Å–µ–π –ö.",
        rating: 5,
        comment: "–û—Ç–ª–∏—á–Ω—ã–µ –±—É—Ä–≥–µ—Ä—ã! –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞, –≤—Å–µ –≥–æ—Ä—è—á–µ–µ.",
        date: "2024-01-15",
        orderItems: ["–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±—É—Ä–≥–µ—Ä", "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏"]
      },
      {
        id: "rev2",
        userName: "–ú–∞—Ä–∏—è –ü.",
        rating: 4,
        comment: "–í–∫—É—Å–Ω–æ, –Ω–æ —Ü–µ–Ω–∞ –Ω–µ–º–Ω–æ–≥–æ –≤—ã—Å–æ–∫–æ–≤–∞—Ç–∞.",
        date: "2024-01-10",
        orderItems: ["–ß–∏–∑–±—É—Ä–≥–µ—Ä –î–µ–ª—é–∫—Å"]
      }
    ]
  },
  {
    id: "pizza-express",
    name: "üçï Pizza Express",
    description: "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –ø–∏—Ü—Ü–∞ –Ω–∞ —Ç–æ–Ω–∫–æ–º —Ç–µ—Å—Ç–µ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∑–∞ 20 –º–∏–Ω—É—Ç",
    image: "üçï",
    cuisine: "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è",
    rating: 4.6,
    deliveryTime: "20-30 –º–∏–Ω",
    deliveryFee: 200,
    minimumOrder: 600,
    isOpen: true,
    location: "–ø—Ä. –ü–æ–±–µ–¥—ã, 45",
    phone: "+7 (999) 234-56-78",
    categories: ["–ü–∏—Ü—Ü–∞", "–ü–∞—Å—Ç–∞", "–°–∞–ª–∞—Ç—ã", "–ù–∞–ø–∏—Ç–∫–∏"],
    menu: [
      {
        id: "margherita",
        name: "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞",
        description: "–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –±–∞–∑–∏–ª–∏–∫, –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ",
        price: 450,
        image: "üçï",
        category: "–ü–∏—Ü—Ü–∞",
        rating: 4.8,
        preparationTime: 15,
        isVegetarian: true,
        isSpicy: false,
        isPopular: true,
        allergies: ["–≥–ª—é—Ç–µ–Ω", "–º–æ–ª–æ–∫–æ"]
      },
      {
        id: "pepperoni",
        name: "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏",
        description: "–ü–∏–∫–∞–Ω—Ç–Ω–∞—è —Å–∞–ª—è–º–∏ –ø–µ–ø–ø–µ—Ä–æ–Ω–∏, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, —Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å",
        price: 520,
        image: "üå∂Ô∏è",
        category: "–ü–∏—Ü—Ü–∞",
        rating: 4.7,
        preparationTime: 18,
        isVegetarian: false,
        isSpicy: true,
        isPopular: true,
        allergies: ["–≥–ª—é—Ç–µ–Ω", "–º–æ–ª–æ–∫–æ"]
      },
      {
        id: "carbonara-pasta",
        name: "–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞",
        description: "–°–ø–∞–≥–µ—Ç—Ç–∏ —Å –±–µ–∫–æ–Ω–æ–º, —è–π—Ü–æ–º, –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º –∏ —á–µ—Ä–Ω—ã–º –ø–µ—Ä—Ü–µ–º",
        price: 380,
        image: "üçù",
        category: "–ü–∞—Å—Ç–∞",
        rating: 4.6,
        preparationTime: 12,
        isVegetarian: false,
        isSpicy: false,
        isPopular: true,
        allergies: ["–≥–ª—é—Ç–µ–Ω", "–º–æ–ª–æ–∫–æ", "—è–π—Ü–∞"]
      },
      {
        id: "caesar-salad",
        name: "–¶–µ–∑–∞—Ä—å —Å –∫—É—Ä–∏—Ü–µ–π",
        description: "–°–∞–ª–∞—Ç —Ä–æ–º–∞–Ω–æ, –∫—É—Ä–∏—Ü–∞ –≥—Ä–∏–ª—å, —Å—É—Ö–∞—Ä–∏–∫–∏, –ø–∞—Ä–º–µ–∑–∞–Ω, —Å–æ—É—Å —Ü–µ–∑–∞—Ä—å",
        price: 320,
        image: "ü•ó",
        category: "–°–∞–ª–∞—Ç—ã",
        rating: 4.4,
        preparationTime: 8,
        isVegetarian: false,
        isSpicy: false,
        isPopular: false,
        allergies: ["–≥–ª—é—Ç–µ–Ω", "–º–æ–ª–æ–∫–æ", "—è–π—Ü–∞"]
      }
    ],
    reviews: [
      {
        id: "rev3",
        userName: "–î–º–∏—Ç—Ä–∏–π –°.",
        rating: 5,
        comment: "–õ—É—á—à–∞—è –ø–∏—Ü—Ü–∞ –≤ –≥–æ—Ä–æ–¥–µ! –¢–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–¥–µ–∞–ª—å–Ω–æ–µ.",
        date: "2024-01-12",
        orderItems: ["–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏"]
      }
    ]
  },
  {
    id: "sushi-master",
    name: "üç£ Sushi Master",
    description: "–°–≤–µ–∂–∏–µ —Å—É—à–∏ –∏ —Ä–æ–ª–ª—ã –æ—Ç —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞ –∏–∑ –Ø–ø–æ–Ω–∏–∏",
    image: "üç£",
    cuisine: "–Ø–ø–æ–Ω—Å–∫–∞—è",
    rating: 4.9,
    deliveryTime: "30-45 –º–∏–Ω",
    deliveryFee: 250,
    minimumOrder: 800,
    isOpen: true,
    location: "—É–ª. –ú–æ—Ä—Å–∫–∞—è, 78",
    phone: "+7 (999) 345-67-89",
    categories: ["–†–æ–ª–ª—ã", "–°—É—à–∏", "–°—É–ø—ã", "–ù–∞–ø–∏—Ç–∫–∏"],
    menu: [
      {
        id: "california-roll",
        name: "–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è",
        description: "–ö—Ä–∞–±, –∞–≤–æ–∫–∞–¥–æ, –æ–≥—É—Ä–µ—Ü, –∏–∫—Ä–∞ —Ç–æ–±–∏–∫–æ, –∫—É–Ω–∂—É—Ç",
        price: 380,
        image: "üç£",
        category: "–†–æ–ª–ª—ã",
        rating: 4.8,
        preparationTime: 15,
        isVegetarian: false,
        isSpicy: false,
        isPopular: true,
        allergies: ["–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã", "–∫—É–Ω–∂—É—Ç"]
      },
      {
        id: "philadelphia-roll",
        name: "–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è",
        description: "–õ–æ—Å–æ—Å—å, —Å–ª–∏–≤–æ—á–Ω—ã–π —Å—ã—Ä, –æ–≥—É—Ä–µ—Ü, –Ω–æ—Ä–∏",
        price: 420,
        image: "üêü",
        category: "–†–æ–ª–ª—ã",
        rating: 4.9,
        preparationTime: 18,
        isVegetarian: false,
        isSpicy: false,
        isPopular: true,
        allergies: ["—Ä—ã–±–∞", "–º–æ–ª–æ–∫–æ"]
      },
      {
        id: "salmon-sushi",
        name: "–°—É—à–∏ —Å –ª–æ—Å–æ—Å–µ–º",
        description: "–°–≤–µ–∂–∏–π –Ω–æ—Ä–≤–µ–∂—Å–∫–∏–π –ª–æ—Å–æ—Å—å –Ω–∞ —Ä–∏—Å–µ —Å –≤–∞—Å–∞–±–∏",
        price: 180,
        image: "üç£",
        category: "–°—É—à–∏",
        rating: 4.9,
        preparationTime: 10,
        isVegetarian: false,
        isSpicy: false,
        isPopular: true,
        allergies: ["—Ä—ã–±–∞"]
      },
      {
        id: "miso-soup",
        name: "–°—É–ø –º–∏—Å–æ",
        description: "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —è–ø–æ–Ω—Å–∫–∏–π —Å—É–ø —Å —Ç–æ—Ñ—É –∏ –≤–æ–¥–æ—Ä–æ—Å–ª—è–º–∏",
        price: 220,
        image: "üç≤",
        category: "–°—É–ø—ã",
        rating: 4.5,
        preparationTime: 8,
        isVegetarian: true,
        isSpicy: false,
        isPopular: false,
        allergies: ["—Å–æ—è"]
      }
    ],
    reviews: [
      {
        id: "rev4",
        userName: "–ê–Ω–Ω–∞ –í.",
        rating: 5,
        comment: "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —Å–≤–µ–∂–∏–µ —Å—É—à–∏! –ö–∞–∫ –≤ –¢–æ–∫–∏–æ.",
        date: "2024-01-08",
        orderItems: ["–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è", "–°—É—à–∏ —Å –ª–æ—Å–æ—Å–µ–º"]
      }
    ]
  }
];

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã
export default function FoodDeliveryApp() {
  const [currentView, setCurrentView] = useState<'restaurants' | 'menu' | 'cart' | 'checkout' | 'orders'>('restaurants');
  const [selectedRestaurant, setSelectedRestaurant] = useState<Restaurant | null>(null);
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [cart, setCart] = useState<CartItem[]>([]);
  const [orders, setOrders] = useState<Order[]>([]);
  const [cuisineFilter, setCuisineFilter] = useState<string>('all');
  const [sortBy, setSortBy] = useState<'rating' | 'deliveryTime' | 'deliveryFee'>('rating');

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ localStorage
  useEffect(() => {
    const savedCart = localStorage.getItem('food-delivery-cart');
    if (savedCart) {
      setCart(JSON.parse(savedCart));
    }

    const savedOrders = localStorage.getItem('food-delivery-orders');
    if (savedOrders) {
      setOrders(JSON.parse(savedOrders).map((order: any) => ({
        ...order,
        orderTime: new Date(order.orderTime),
        estimatedDelivery: new Date(order.estimatedDelivery)
      })));
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ localStorage
  useEffect(() => {
    localStorage.setItem('food-delivery-cart', JSON.stringify(cart));
  }, [cart]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ localStorage
  useEffect(() => {
    localStorage.setItem('food-delivery-orders', JSON.stringify(orders));
  }, [orders]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
  const filteredRestaurants = useMemo(() => {
    let filtered = restaurantsData.filter(restaurant => {
      const matchesSearch = restaurant.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                          restaurant.cuisine.toLowerCase().includes(searchQuery.toLowerCase());
      const matchesCuisine = cuisineFilter === 'all' || restaurant.cuisine === cuisineFilter;
      return matchesSearch && matchesCuisine && restaurant.isOpen;
    });

    return filtered.sort((a, b) => {
      switch (sortBy) {
        case 'rating':
          return b.rating - a.rating;
        case 'deliveryTime':
          return parseInt(a.deliveryTime) - parseInt(b.deliveryTime);
        case 'deliveryFee':
          return a.deliveryFee - b.deliveryFee;
        default:
          return 0;
      }
    });
  }, [searchQuery, cuisineFilter, sortBy]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–µ–Ω—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const filteredMenu = useMemo(() => {
    if (!selectedRestaurant) return [];
    
    if (selectedCategory === 'all') {
      return selectedRestaurant.menu;
    }
    
    return selectedRestaurant.menu.filter(item => item.category === selectedCategory);
  }, [selectedRestaurant, selectedCategory]);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
  const addToCart = useCallback((menuItem: MenuItem, restaurantId: string) => {
    setCart(prevCart => {
      const existingItem = prevCart.find(item => 
        item.menuItem.id === menuItem.id && item.restaurantId === restaurantId
      );

      if (existingItem) {
        return prevCart.map(item =>
          item.menuItem.id === menuItem.id && item.restaurantId === restaurantId
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      } else {
        return [...prevCart, { menuItem, quantity: 1, restaurantId }];
      }
    });
  }, []);

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  const removeFromCart = useCallback((menuItemId: string, restaurantId: string) => {
    setCart(prevCart => prevCart.filter(item => 
      !(item.menuItem.id === menuItemId && item.restaurantId === restaurantId)
    ));
  }, []);

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
  const updateCartItemQuantity = useCallback((menuItemId: string, restaurantId: string, quantity: number) => {
    if (quantity <= 0) {
      removeFromCart(menuItemId, restaurantId);
      return;
    }

    setCart(prevCart => prevCart.map(item =>
      item.menuItem.id === menuItemId && item.restaurantId === restaurantId
        ? { ...item, quantity }
        : item
    ));
  }, [removeFromCart]);

  // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—ã
  const cartTotal = useMemo(() => {
    return cart.reduce((total, item) => total + (item.menuItem.price * item.quantity), 0);
  }, [cart]);

  // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
  const deliveryFee = useMemo(() => {
    if (cart.length === 0) return 0;
    const restaurantId = cart[0].restaurantId;
    const restaurant = restaurantsData.find(r => r.id === restaurantId);
    return restaurant?.deliveryFee || 0;
  }, [cart]);

  // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  const placeOrder = useCallback((customerInfo: any, paymentMethod: string, deliveryInstructions?: string) => {
    if (cart.length === 0) return;

    const newOrder: Order = {
      id: `order-${Date.now()}`,
      restaurantId: cart[0].restaurantId,
      items: [...cart],
      total: cartTotal + deliveryFee,
      status: 'preparing',
      orderTime: new Date(),
      estimatedDelivery: new Date(Date.now() + 35 * 60 * 1000), // +35 –º–∏–Ω—É—Ç
      customerInfo,
      paymentMethod,
      deliveryInstructions
    };

    setOrders(prevOrders => [newOrder, ...prevOrders]);
    setCart([]);
    setCurrentView('orders');

    // –°–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    setTimeout(() => {
      setOrders(prevOrders => prevOrders.map(order =>
        order.id === newOrder.id ? { ...order, status: 'ready' } : order
      ));
    }, 10000); // 10 —Å–µ–∫—É–Ω–¥ - –≥–æ—Ç–æ–≤–∏—Ç—Å—è

    setTimeout(() => {
      setOrders(prevOrders => prevOrders.map(order =>
        order.id === newOrder.id ? { ...order, status: 'delivering' } : order
      ));
    }, 20000); // 20 —Å–µ–∫—É–Ω–¥ - –≤ –ø—É—Ç–∏

    setTimeout(() => {
      setOrders(prevOrders => prevOrders.map(order =>
        order.id === newOrder.id ? { ...order, status: 'delivered' } : order
      ));
    }, 35000); // 35 —Å–µ–∫—É–Ω–¥ - –¥–æ—Å—Ç–∞–≤–ª–µ–Ω
  }, [cart, cartTotal, deliveryFee]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫—É—Ö–æ–Ω—å
  const cuisines = useMemo(() => {
    const allCuisines = restaurantsData.map(r => r.cuisine);
    return Array.from(new Set(allCuisines));
  }, []);

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
  const RestaurantsCatalog = () => (
    <div className="space-y-6">
      {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
      <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-4">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="md:col-span-2">
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∏–ª–∏ –±–ª—é–¥..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent dark:bg-slate-700 dark:text-white"
            />
          </div>
          <select
            value={cuisineFilter}
            onChange={(e) => setCuisineFilter(e.target.value)}
            className="px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-orange-500 dark:bg-slate-700 dark:text-white"
          >
            <option value="all">–í—Å–µ –∫—É—Ö–Ω–∏</option>
            {cuisines.map(cuisine => (
              <option key={cuisine} value={cuisine}>{cuisine}</option>
            ))}
          </select>
          <select
            value={sortBy}
            onChange={(e) => setSortBy(e.target.value as any)}
            className="px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-orange-500 dark:bg-slate-700 dark:text-white"
          >
            <option value="rating">–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É</option>
            <option value="deliveryTime">–ü–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏</option>
            <option value="deliveryFee">–ü–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏</option>
          </select>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredRestaurants.map(restaurant => (
          <div
            key={restaurant.id}
            className="bg-white dark:bg-slate-800 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300 overflow-hidden cursor-pointer"
            onClick={() => {
              setSelectedRestaurant(restaurant);
              setSelectedCategory('all');
              setCurrentView('menu');
            }}
          >
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <div className="text-4xl">{restaurant.image}</div>
                <div className="text-right">
                  <div className="flex items-center space-x-1 text-sm text-yellow-600">
                    <span>‚≠ê</span>
                    <span className="font-medium">{restaurant.rating}</span>
                  </div>
                  <div className="text-xs text-slate-500">{restaurant.deliveryTime}</div>
                </div>
              </div>

              <h3 className="text-xl font-semibold text-slate-900 dark:text-slate-100 mb-2">
                {restaurant.name}
              </h3>
              <p className="text-slate-600 dark:text-slate-400 text-sm mb-3">
                {restaurant.description}
              </p>

              <div className="flex justify-between items-center text-sm">
                <span className="bg-orange-100 dark:bg-orange-900/30 text-orange-800 dark:text-orange-200 px-2 py-1 rounded">
                  {restaurant.cuisine}
                </span>
                <div className="text-slate-500">
                  –î–æ—Å—Ç–∞–≤–∫–∞: {restaurant.deliveryFee}‚ÇΩ
                </div>
              </div>

              <div className="flex justify-between items-center text-xs text-slate-500 mt-2">
                <span>–ú–∏–Ω. –∑–∞–∫–∞–∑: {restaurant.minimumOrder}‚ÇΩ</span>
                <span>{restaurant.location}</span>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
  const RestaurantMenu = () => {
    if (!selectedRestaurant) return null;

    return (
      <div className="space-y-6">
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ */}
        <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-4">
              <div className="text-5xl">{selectedRestaurant.image}</div>
              <div>
                <h2 className="text-2xl font-bold text-slate-900 dark:text-slate-100">
                  {selectedRestaurant.name}
                </h2>
                <p className="text-slate-600 dark:text-slate-400">
                  {selectedRestaurant.description}
                </p>
                <div className="flex items-center space-x-4 mt-2 text-sm">
                  <span className="flex items-center space-x-1 text-yellow-600">
                    <span>‚≠ê</span>
                    <span>{selectedRestaurant.rating}</span>
                  </span>
                  <span className="text-slate-500">
                    üöö {selectedRestaurant.deliveryTime}
                  </span>
                  <span className="text-slate-500">
                    üìû {selectedRestaurant.phone}
                  </span>
                </div>
              </div>
            </div>
            <button
              onClick={() => setCurrentView('restaurants')}
              className="text-slate-600 dark:text-slate-400 hover:text-slate-900 dark:hover:text-slate-100"
            >
              ‚Üê –ù–∞–∑–∞–¥ –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º
            </button>
          </div>
        </div>

        {/* –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
        <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-4">
          <div className="flex flex-wrap gap-2">
            <button
              onClick={() => setSelectedCategory('all')}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                selectedCategory === 'all'
                  ? 'bg-orange-600 text-white'
                  : 'bg-slate-200 dark:bg-slate-700 text-slate-700 dark:text-slate-300 hover:bg-slate-300 dark:hover:bg-slate-600'
              }`}
            >
              –í—Å–µ –±–ª—é–¥–∞
            </button>
            {selectedRestaurant.categories.map(category => (
              <button
                key={category}
                onClick={() => setSelectedCategory(category)}
                className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                  selectedCategory === category
                    ? 'bg-orange-600 text-white'
                    : 'bg-slate-200 dark:bg-slate-700 text-slate-700 dark:text-slate-300 hover:bg-slate-300 dark:hover:bg-slate-600'
                }`}
              >
                {category}
              </button>
            ))}
          </div>
        </div>

        {/* –ú–µ–Ω—é */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {filteredMenu.map(item => (
            <div
              key={item.id}
              className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow"
            >
              <div className="flex justify-between items-start mb-3">
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-2">
                    <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">
                      {item.name}
                    </h3>
                    {item.isPopular && (
                      <span className="bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200 text-xs px-2 py-1 rounded">
                        üî• –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ
                      </span>
                    )}
                    {item.isVegetarian && (
                      <span className="text-green-600" title="–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ">üå±</span>
                    )}
                    {item.isSpicy && (
                      <span className="text-red-600" title="–û—Å—Ç—Ä–æ–µ">üå∂Ô∏è</span>
                    )}
                  </div>
                  <p className="text-slate-600 dark:text-slate-400 text-sm mb-2">
                    {item.description}
                  </p>
                  <div className="flex items-center space-x-4 text-xs text-slate-500">
                    <span className="flex items-center space-x-1">
                      <span>‚≠ê</span>
                      <span>{item.rating}</span>
                    </span>
                    <span>‚è±Ô∏è {item.preparationTime} –º–∏–Ω</span>
                    {item.allergies.length > 0 && (
                      <span title={`–ê–ª–ª–µ—Ä–≥–µ–Ω—ã: ${item.allergies.join(', ')}`}>
                        ‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–µ–Ω—ã
                      </span>
                    )}
                  </div>
                </div>
                <div className="text-3xl ml-4">{item.image}</div>
              </div>

              <div className="flex justify-between items-center">
                <span className="text-xl font-bold text-orange-600">
                  {item.price}‚ÇΩ
                </span>
                <button
                  onClick={() => addToCart(item, selectedRestaurant.id)}
                  className="bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
                >
                  –í –∫–æ—Ä–∑–∏–Ω—É
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã
  const Cart = () => {
    if (cart.length === 0) {
      return (
        <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-8 text-center">
          <div className="text-6xl mb-4">üõí</div>
          <h2 className="text-2xl font-bold text-slate-900 dark:text-slate-100 mb-2">
            –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
          </h2>
          <p className="text-slate-600 dark:text-slate-400 mb-6">
            –î–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞ –∏–∑ –ª—é–±–∏–º—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
          </p>
          <button
            onClick={() => setCurrentView('restaurants')}
            className="bg-orange-600 hover:bg-orange-700 text-white px-6 py-3 rounded-lg font-medium"
          >
            –í—ã–±—Ä–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω
          </button>
        </div>
      );
    }

    const restaurant = restaurantsData.find(r => r.id === cart[0].restaurantId);

    return (
      <div className="space-y-6">
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ */}
        <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
          <h2 className="text-2xl font-bold text-slate-900 dark:text-slate-100 mb-4">
            –í–∞—à –∑–∞–∫–∞–∑
          </h2>
          {restaurant && (
            <div className="flex items-center space-x-3 mb-6">
              <span className="text-2xl">{restaurant.image}</span>
              <div>
                <h3 className="font-semibold text-slate-900 dark:text-slate-100">
                  {restaurant.name}
                </h3>
                <p className="text-sm text-slate-600 dark:text-slate-400">
                  –î–æ—Å—Ç–∞–≤–∫–∞: {restaurant.deliveryTime} ‚Ä¢ {restaurant.deliveryFee}‚ÇΩ
                </p>
              </div>
            </div>
          )}
        </div>

        {/* –¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ */}
        <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
          <div className="space-y-4">
            {cart.map((item, index) => (
              <div key={`${item.menuItem.id}-${index}`} className="flex items-center justify-between border-b border-slate-200 dark:border-slate-700 pb-4">
                <div className="flex items-center space-x-4">
                  <span className="text-2xl">{item.menuItem.image}</span>
                  <div>
                    <h4 className="font-medium text-slate-900 dark:text-slate-100">
                      {item.menuItem.name}
                    </h4>
                    <p className="text-sm text-slate-600 dark:text-slate-400">
                      {item.menuItem.price}‚ÇΩ –∑–∞ —à—Ç—É–∫—É
                    </p>
                  </div>
                </div>

                <div className="flex items-center space-x-3">
                  <button
                    onClick={() => updateCartItemQuantity(item.menuItem.id, item.restaurantId, item.quantity - 1)}
                    className="w-8 h-8 rounded-full bg-slate-200 dark:bg-slate-700 flex items-center justify-center hover:bg-slate-300 dark:hover:bg-slate-600"
                  >
                    ‚àí
                  </button>
                  <span className="w-8 text-center font-medium">
                    {item.quantity}
                  </span>
                  <button
                    onClick={() => updateCartItemQuantity(item.menuItem.id, item.restaurantId, item.quantity + 1)}
                    className="w-8 h-8 rounded-full bg-slate-200 dark:bg-slate-700 flex items-center justify-center hover:bg-slate-300 dark:hover:bg-slate-600"
                  >
                    +
                  </button>
                  <button
                    onClick={() => removeFromCart(item.menuItem.id, item.restaurantId)}
                    className="w-8 h-8 rounded-full bg-red-100 dark:bg-red-900/30 text-red-600 flex items-center justify-center hover:bg-red-200 dark:hover:bg-red-900/50 ml-2"
                  >
                    √ó
                  </button>
                  <span className="w-20 text-right font-medium text-slate-900 dark:text-slate-100">
                    {item.menuItem.price * item.quantity}‚ÇΩ
                  </span>
                </div>
              </div>
            ))}
          </div>

          {/* –ò—Ç–æ–≥–æ */}
          <div className="mt-6 space-y-2">
            <div className="flex justify-between text-slate-600 dark:text-slate-400">
              <span>–°—Ç–æ–∏–º–æ—Å—Ç—å –±–ª—é–¥:</span>
              <span>{cartTotal}‚ÇΩ</span>
            </div>
            <div className="flex justify-between text-slate-600 dark:text-slate-400">
              <span>–î–æ—Å—Ç–∞–≤–∫–∞:</span>
              <span>{deliveryFee}‚ÇΩ</span>
            </div>
            <div className="flex justify-between text-lg font-bold text-slate-900 dark:text-slate-100 pt-2 border-t border-slate-200 dark:border-slate-700">
              <span>–ò—Ç–æ–≥–æ:</span>
              <span>{cartTotal + deliveryFee}‚ÇΩ</span>
            </div>
          </div>

          <button
            onClick={() => setCurrentView('checkout')}
            className="w-full bg-orange-600 hover:bg-orange-700 text-white py-3 px-6 rounded-lg font-medium mt-6 transition-colors"
            disabled={cartTotal < (restaurant?.minimumOrder || 0)}
          >
            {cartTotal < (restaurant?.minimumOrder || 0) 
              ? `–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: ${restaurant?.minimumOrder}‚ÇΩ`
              : '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'
            }
          </button>
        </div>
      </div>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
  const Checkout = () => {
    const [customerInfo, setCustomerInfo] = useState({
      name: '',
      phone: '',
      address: ''
    });
    const [paymentMethod, setPaymentMethod] = useState('card');
    const [deliveryInstructions, setDeliveryInstructions] = useState('');

    const handleSubmit = (e: React.FormEvent) => {
      e.preventDefault();
      if (customerInfo.name && customerInfo.phone && customerInfo.address) {
        placeOrder(customerInfo, paymentMethod, deliveryInstructions);
      }
    };

    return (
      <div className="max-w-2xl mx-auto space-y-6">
        <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
          <h2 className="text-2xl font-bold text-slate-900 dark:text-slate-100 mb-6">
            –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
          </h2>

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div>
              <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4">
                –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <input
                  type="text"
                  placeholder="–í–∞—à–µ –∏–º—è"
                  value={customerInfo.name}
                  onChange={(e) => setCustomerInfo({...customerInfo, name: e.target.value})}
                  required
                  className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-orange-500 dark:bg-slate-700 dark:text-white"
                />
                <input
                  type="tel"
                  placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                  value={customerInfo.phone}
                  onChange={(e) => setCustomerInfo({...customerInfo, phone: e.target.value})}
                  required
                  className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-orange-500 dark:bg-slate-700 dark:text-white"
                />
              </div>
              <input
                type="text"
                placeholder="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
                value={customerInfo.address}
                onChange={(e) => setCustomerInfo({...customerInfo, address: e.target.value})}
                required
                className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-orange-500 dark:bg-slate-700 dark:text-white mt-4"
              />
            </div>

            {/* –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã */}
            <div>
              <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4">
                –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
              </h3>
              <div className="space-y-2">
                <label className="flex items-center space-x-3 cursor-pointer">
                  <input
                    type="radio"
                    value="card"
                    checked={paymentMethod === 'card'}
                    onChange={(e) => setPaymentMethod(e.target.value)}
                    className="text-orange-600"
                  />
                  <span className="text-slate-900 dark:text-slate-100">üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π</span>
                </label>
                <label className="flex items-center space-x-3 cursor-pointer">
                  <input
                    type="radio"
                    value="cash"
                    checked={paymentMethod === 'cash'}
                    onChange={(e) => setPaymentMethod(e.target.value)}
                    className="text-orange-600"
                  />
                  <span className="text-slate-900 dark:text-slate-100">üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏</span>
                </label>
              </div>
            </div>

            {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É */}
            <div>
              <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4">
                –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É
              </h3>
              <textarea
                placeholder="–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–µ..."
                value={deliveryInstructions}
                onChange={(e) => setDeliveryInstructions(e.target.value)}
                rows={3}
                className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-orange-500 dark:bg-slate-700 dark:text-white resize-none"
              />
            </div>

            {/* –ò—Ç–æ–≥–æ –∏ –∫–Ω–æ–ø–∫–∞ */}
            <div className="bg-slate-50 dark:bg-slate-700 rounded-lg p-4">
              <div className="flex justify-between items-center mb-4">
                <span className="text-lg font-semibold text-slate-900 dark:text-slate-100">
                  –ö –æ–ø–ª–∞—Ç–µ:
                </span>
                <span className="text-2xl font-bold text-orange-600">
                  {cartTotal + deliveryFee}‚ÇΩ
                </span>
              </div>
              
              <div className="flex space-x-4">
                <button
                  type="button"
                  onClick={() => setCurrentView('cart')}
                  className="flex-1 bg-slate-600 hover:bg-slate-700 text-white py-3 px-6 rounded-lg font-medium"
                >
                  –ù–∞–∑–∞–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É
                </button>
                <button
                  type="submit"
                  className="flex-1 bg-orange-600 hover:bg-orange-700 text-white py-3 px-6 rounded-lg font-medium"
                >
                  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
  const OrderTracking = () => {
    const getStatusColor = (status: string) => {
      switch (status) {
        case 'preparing': return 'text-yellow-600 bg-yellow-100 dark:bg-yellow-900/30';
        case 'ready': return 'text-blue-600 bg-blue-100 dark:bg-blue-900/30';
        case 'delivering': return 'text-purple-600 bg-purple-100 dark:bg-purple-900/30';
        case 'delivered': return 'text-green-600 bg-green-100 dark:bg-green-900/30';
        default: return 'text-slate-600 bg-slate-100 dark:bg-slate-700';
      }
    };

    const getStatusText = (status: string) => {
      switch (status) {
        case 'preparing': return 'üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è';
        case 'ready': return 'üì¶ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ';
        case 'delivering': return 'üöö –í –ø—É—Ç–∏';
        case 'delivered': return '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω';
        default: return status;
      }
    };

    if (orders.length === 0) {
      return (
        <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-8 text-center">
          <div className="text-6xl mb-4">üìã</div>
          <h2 className="text-2xl font-bold text-slate-900 dark:text-slate-100 mb-2">
            –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç
          </h2>
          <p className="text-slate-600 dark:text-slate-400 mb-6">
            –°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ª—é–±–∏–º–æ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
          </p>
          <button
            onClick={() => setCurrentView('restaurants')}
            className="bg-orange-600 hover:bg-orange-700 text-white px-6 py-3 rounded-lg font-medium"
          >
            –ó–∞–∫–∞–∑–∞—Ç—å –µ–¥—É
          </button>
        </div>
      );
    }

    return (
      <div className="space-y-6">
        <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
          <h2 className="text-2xl font-bold text-slate-900 dark:text-slate-100 mb-6">
            –ú–æ–∏ –∑–∞–∫–∞–∑—ã
          </h2>
        </div>

        {orders.map(order => {
          const restaurant = restaurantsData.find(r => r.id === order.restaurantId);
          
          return (
            <div key={order.id} className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
              <div className="flex justify-between items-start mb-4">
                <div>
                  <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">
                    –ó–∞–∫–∞–∑ #{order.id.slice(-8)}
                  </h3>
                  <p className="text-sm text-slate-600 dark:text-slate-400">
                    {order.orderTime.toLocaleString()}
                  </p>
                  {restaurant && (
                    <p className="text-sm text-slate-600 dark:text-slate-400 mt-1">
                      {restaurant.image} {restaurant.name}
                    </p>
                  )}
                </div>
                <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(order.status)}`}>
                  {getStatusText(order.status)}
                </span>
              </div>

              {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
              <div className="mb-4">
                <div className="flex justify-between text-xs text-slate-500 mb-2">
                  <span>–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç</span>
                  <span>–ì–æ—Ç–æ–≤–∏—Ç—Å—è</span>
                  <span>–í –ø—É—Ç–∏</span>
                  <span>–î–æ—Å—Ç–∞–≤–ª–µ–Ω</span>
                </div>
                <div className="w-full bg-slate-200 dark:bg-slate-700 rounded-full h-2">
                  <div 
                    className="bg-orange-600 h-2 rounded-full transition-all duration-500"
                    style={{
                      width: order.status === 'preparing' ? '25%' :
                             order.status === 'ready' ? '50%' :
                             order.status === 'delivering' ? '75%' :
                             order.status === 'delivered' ? '100%' : '0%'
                    }}
                  ></div>
                </div>
              </div>

              {/* –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ */}
              <div className="space-y-2 mb-4">
                {order.items.map((item, index) => (
                  <div key={index} className="flex justify-between items-center text-sm">
                    <span className="text-slate-900 dark:text-slate-100">
                      {item.menuItem.name} √ó {item.quantity}
                    </span>
                    <span className="text-slate-600 dark:text-slate-400">
                      {item.menuItem.price * item.quantity}‚ÇΩ
                    </span>
                  </div>
                ))}
              </div>

              <div className="flex justify-between items-center pt-4 border-t border-slate-200 dark:border-slate-700">
                <div className="text-sm text-slate-600 dark:text-slate-400">
                  {order.status === 'delivered' ? '–î–æ—Å—Ç–∞–≤–ª–µ–Ω' : 
                   `–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ${order.estimatedDelivery.toLocaleTimeString()}`}
                </div>
                <div className="text-lg font-bold text-slate-900 dark:text-slate-100">
                  {order.total}‚ÇΩ
                </div>
              </div>

              {order.status === 'delivered' && (
                <div className="mt-4 text-center">
                  <button className="bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg text-sm font-medium">
                    –û—Ü–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
                  </button>
                </div>
              )}
            </div>
          );
        })}
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800">
      <div className="container mx-auto px-4 py-8 max-w-6xl">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-4xl font-bold text-slate-900 dark:text-slate-100 mb-2">
              üçî –î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã
            </h1>
            <p className="text-lg text-slate-600 dark:text-slate-400">
              –õ—é–±–∏–º—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –Ω–∞ –¥–æ–º
            </p>
          </div>
          
          <Link 
            href="/"
            className="bg-slate-900 dark:bg-slate-100 text-white dark:text-slate-900 px-6 py-2 rounded-lg font-medium hover:bg-slate-800 dark:hover:bg-slate-200 transition-colors"
          >
            ‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é
          </Link>
        </div>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-4 mb-8">
          <div className="flex flex-wrap gap-2">
            <button
              onClick={() => setCurrentView('restaurants')}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                currentView === 'restaurants'
                  ? 'bg-orange-600 text-white'
                  : 'bg-slate-200 dark:bg-slate-700 text-slate-700 dark:text-slate-300 hover:bg-slate-300 dark:hover:bg-slate-600'
              }`}
            >
              üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω—ã
            </button>
            {selectedRestaurant && (
              <button
                onClick={() => setCurrentView('menu')}
                className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                  currentView === 'menu'
                    ? 'bg-orange-600 text-white'
                    : 'bg-slate-200 dark:bg-slate-700 text-slate-700 dark:text-slate-300 hover:bg-slate-300 dark:hover:bg-slate-600'
                }`}
              >
                üìã –ú–µ–Ω—é
              </button>
            )}
            <button
              onClick={() => setCurrentView('cart')}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                currentView === 'cart'
                  ? 'bg-orange-600 text-white'
                  : 'bg-slate-200 dark:bg-slate-700 text-slate-700 dark:text-slate-300 hover:bg-slate-300 dark:hover:bg-slate-600'
              }`}
            >
              üõí –ö–æ—Ä–∑–∏–Ω–∞ ({cart.length})
            </button>
            <button
              onClick={() => setCurrentView('orders')}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                currentView === 'orders'
                  ? 'bg-orange-600 text-white'
                  : 'bg-slate-200 dark:bg-slate-700 text-slate-700 dark:text-slate-300 hover:bg-slate-300 dark:hover:bg-slate-600'
              }`}
            >
              üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã ({orders.length})
            </button>
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        {currentView === 'restaurants' && <RestaurantsCatalog />}
        {currentView === 'menu' && <RestaurantMenu />}
        {currentView === 'cart' && <Cart />}
        {currentView === 'checkout' && <Checkout />}
        {currentView === 'orders' && <OrderTracking />}

        {/* Footer */}
        <footer className="mt-12 text-center">
          <p className="text-slate-500 dark:text-slate-500 text-sm">
            üçï –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ª—É—á—à–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≥–æ—Ä–æ–¥–∞!
          </p>
        </footer>
      </div>
    </div>
  );
}
