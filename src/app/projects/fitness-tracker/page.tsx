"use client";

import { useState, useEffect, useCallback, useMemo } from "react";
import Link from "next/link";

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏—Ç–Ω–µ—Å —Ç—Ä–µ–∫–µ—Ä–∞
interface Exercise {
  id: string;
  name: string;
  category: string;
  muscleGroups: string[];
  description: string;
  instructions: string[];
  difficulty: '–ù–∞—á–∏–Ω–∞—é—â–∏–π' | '–°—Ä–µ–¥–Ω–∏–π' | '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
  equipment: string[];
  image: string;
  videoUrl?: string;
}

interface WorkoutSet {
  id: string;
  exerciseId: string;
  reps: number;
  weight: number;
  duration?: number; // –¥–ª—è –∫–∞—Ä–¥–∏–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  distance?: number; // –¥–ª—è –±–µ–≥–∞ –≤ –º–µ—Ç—Ä–∞—Ö
  restTime: number; // –æ—Ç–¥—ã—Ö –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  completed: boolean;
  notes?: string;
}

interface WorkoutSession {
  id: string;
  name: string;
  date: Date;
  startTime?: Date;
  endTime?: Date;
  duration: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö
  sets: WorkoutSet[];
  totalWeight: number;
  totalReps: number;
  calories: number;
  notes?: string;
  completed: boolean;
}

interface Goal {
  id: string;
  type: 'weight' | 'reps' | 'duration' | 'frequency' | 'bodyweight';
  title: string;
  description: string;
  targetValue: number;
  currentValue: number;
  unit: string;
  deadline: Date;
  category: string;
  completed: boolean;
  createdAt: Date;
}

interface Achievement {
  id: string;
  title: string;
  description: string;
  icon: string;
  category: string;
  unlocked: boolean;
  unlockedAt?: Date;
  requirement: string;
  points: number;
}

interface UserStats {
  totalWorkouts: number;
  totalDuration: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö
  totalWeight: number; // –∫–≥ –ø–æ–¥–Ω—è—Ç–æ
  totalReps: number;
  caloriesBurned: number;
  currentStreak: number;
  longestStreak: number;
  favoriteExercise: string;
  achievements: string[];
  level: number;
  experience: number;
}

// –î–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
const exercisesData: Exercise[] = [
  {
    id: "bench-press",
    name: "–ñ–∏–º –ª–µ–∂–∞",
    category: "–°–∏–ª–æ–≤—ã–µ",
    muscleGroups: ["–ì—Ä—É–¥—å", "–ü–ª–µ—á–∏", "–¢—Ä–∏—Ü–µ–ø—Å"],
    description: "–ë–∞–∑–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –º—ã—à—Ü –≥—Ä—É–¥–∏",
    instructions: [
      "–õ—è–≥—Ç–µ –Ω–∞ —Å–∫–∞–º—å—é, —Å—Ç–æ–ø—ã –ø–ª–æ—Ç–Ω–æ –Ω–∞ –ø–æ–ª—É",
      "–í–æ–∑—å–º–∏—Ç–µ —à—Ç–∞–Ω–≥—É —à–∏—Ä–æ–∫–∏–º —Ö–≤–∞—Ç–æ–º",
      "–û–ø—É—Å—Ç–∏—Ç–µ —à—Ç–∞–Ω–≥—É –∫ –≥—Ä—É–¥–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ",
      "–í—ã–∂–º–∏—Ç–µ –≤–≤–µ—Ä—Ö, –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø—Ä—è–º–∏–≤ —Ä—É–∫–∏"
    ],
    difficulty: "–°—Ä–µ–¥–Ω–∏–π",
    equipment: ["–®—Ç–∞–Ω–≥–∞", "–°–∫–∞–º—å—è"],
    image: "üèãÔ∏è"
  },
  {
    id: "squat",
    name: "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è",
    category: "–°–∏–ª–æ–≤—ã–µ",
    muscleGroups: ["–ö–≤–∞–¥—Ä–∏—Ü–µ–ø—Å", "–Ø–≥–æ–¥–∏—Ü—ã", "–ò–∫—Ä—ã"],
    description: "–ö–æ—Ä–æ–ª—å –≤—Å–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —Ç–µ–ª–∞",
    instructions: [
      "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–≥–∏ –Ω–∞ —à–∏—Ä–∏–Ω–µ –ø–ª–µ—á",
      "–û–ø—É—Å—Ç–∏—Ç–µ—Å—å, –æ—Ç–≤–æ–¥—è —Ç–∞–∑ –Ω–∞–∑–∞–¥",
      "–î–µ—Ä–∂–∏—Ç–µ —Å–ø–∏–Ω—É –ø—Ä—è–º–æ–π",
      "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ"
    ],
    difficulty: "–ù–∞—á–∏–Ω–∞—é—â–∏–π",
    equipment: ["–®—Ç–∞–Ω–≥–∞", "–°—Ç–æ–π–∫–∞"],
    image: "ü¶µ"
  },
  {
    id: "deadlift",
    name: "–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞",
    category: "–°–∏–ª–æ–≤—ã–µ",
    muscleGroups: ["–°–ø–∏–Ω–∞", "–Ø–≥–æ–¥–∏—Ü—ã", "–ë–∏—Ü–µ–ø—Å –±–µ–¥—Ä–∞"],
    description: "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ–≥–æ —Ç–µ–ª–∞",
    instructions: [
      "–í—Å—Ç–∞–Ω—å—Ç–µ –Ω–∞–¥ —à—Ç–∞–Ω–≥–æ–π, –Ω–æ–≥–∏ –Ω–∞ —à–∏—Ä–∏–Ω–µ –ø–ª–µ—á",
      "–°–æ–≥–Ω–∏—Ç–µ –∫–æ–ª–µ–Ω–∏ –∏ –≤–æ–∑—å–º–∏—Ç–µ —à—Ç–∞–Ω–≥—É",
      "–ü–æ–¥–Ω–∏–º–∞–π—Ç–µ, —Ä–∞–∑–≥–∏–±–∞—è –Ω–æ–≥–∏ –∏ —Å–ø–∏–Ω—É",
      "–ü–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø—Ä—è–º–∏—Ç–µ—Å—å –≤–≤–µ—Ä—Ö—É"
    ],
    difficulty: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
    equipment: ["–®—Ç–∞–Ω–≥–∞"],
    image: "üí™"
  },
  {
    id: "pull-ups",
    name: "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è",
    category: "–°–∏–ª–æ–≤—ã–µ",
    muscleGroups: ["–°–ø–∏–Ω–∞", "–ë–∏—Ü–µ–ø—Å"],
    description: "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–µ—Å–æ–º –¥–ª—è —Å–ø–∏–Ω—ã",
    instructions: [
      "–í–æ–∑—å–º–∏—Ç–µ—Å—å –∑–∞ –ø–µ—Ä–µ–∫–ª–∞–¥–∏–Ω—É —à–∏—Ä–æ–∫–∏–º —Ö–≤–∞—Ç–æ–º",
      "–ü–æ–¥—Ç—è–Ω–∏—Ç–µ—Å—å, —Å–≤–æ–¥—è –ª–æ–ø–∞—Ç–∫–∏",
      "–î–æ—Å—Ç–∞–Ω—å—Ç–µ –ø–æ–¥–±–æ—Ä–æ–¥–∫–æ–º –¥–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏–Ω—ã",
      "–û–ø—É—Å—Ç–∏—Ç–µ—Å—å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ"
    ],
    difficulty: "–°—Ä–µ–¥–Ω–∏–π",
    equipment: ["–¢—É—Ä–Ω–∏–∫"],
    image: "üéØ"
  },
  {
    id: "push-ups",
    name: "–û—Ç–∂–∏–º–∞–Ω–∏—è",
    category: "–°–∏–ª–æ–≤—ã–µ",
    muscleGroups: ["–ì—Ä—É–¥—å", "–ü–ª–µ—á–∏", "–¢—Ä–∏—Ü–µ–ø—Å"],
    description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–µ—Å–æ–º",
    instructions: [
      "–ü—Ä–∏–º–∏—Ç–µ —É–ø–æ—Ä –ª–µ–∂–∞",
      "–û–ø—É—Å—Ç–∏—Ç–µ—Å—å, –∫–∞—Å–∞—è—Å—å –≥—Ä—É–¥—å—é –ø–æ–ª–∞",
      "–û—Ç–∂–∏–º–∞–π—Ç–µ—Å—å, –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø—Ä—è–º–ª—è—è —Ä—É–∫–∏",
      "–î–µ—Ä–∂–∏—Ç–µ —Ç–µ–ª–æ –ø—Ä—è–º—ã–º"
    ],
    difficulty: "–ù–∞—á–∏–Ω–∞—é—â–∏–π",
    equipment: [],
    image: "üí•"
  },
  {
    id: "running",
    name: "–ë–µ–≥",
    category: "–ö–∞—Ä–¥–∏–æ",
    muscleGroups: ["–ù–æ–≥–∏", "–ö–æ—Ä"],
    description: "–ê—ç—Ä–æ–±–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏",
    instructions: [
      "–ù–∞—á–Ω–∏—Ç–µ —Å –ª–µ–≥–∫–æ–π —Ä–∞–∑–º–∏–Ω–∫–∏",
      "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ä–æ–≤–Ω—ã–π —Ç–µ–º–ø",
      "–î—ã—à–∏—Ç–µ —Ä–∏—Ç–º–∏—á–Ω–æ",
      "–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç–µ—Ö–Ω–∏–∫–æ–π –±–µ–≥–∞"
    ],
    difficulty: "–ù–∞—á–∏–Ω–∞—é—â–∏–π",
    equipment: ["–ë–µ–≥–æ–≤—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏"],
    image: "üèÉ"
  },
  {
    id: "plank",
    name: "–ü–ª–∞–Ω–∫–∞",
    category: "–ö–æ—Ä",
    muscleGroups: ["–ö–æ—Ä", "–ü–ª–µ—á–∏"],
    description: "–ò–∑–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –º—ã—à—Ü –∫–æ—Ä–∞",
    instructions: [
      "–ü—Ä–∏–º–∏—Ç–µ —É–ø–æ—Ä –Ω–∞ –ø—Ä–µ–¥–ø–ª–µ—á—å—è",
      "–î–µ—Ä–∂–∏—Ç–µ —Ç–µ–ª–æ –ø—Ä—è–º–æ–π –ª–∏–Ω–∏–µ–π",
      "–ù–∞–ø—Ä—è–≥–∏—Ç–µ –ø—Ä–µ—Å—Å",
      "–î—ã—à–∏—Ç–µ —Å–ø–æ–∫–æ–π–Ω–æ"
    ],
    difficulty: "–ù–∞—á–∏–Ω–∞—é—â–∏–π",
    equipment: [],
    image: "üßò"
  }
];

// –ì–æ—Ç–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
const workoutTemplates = [
  {
    id: "push-day",
    name: "Push Day (–¢–æ–ª–∫–∞–Ω–∏–µ)",
    description: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≥—Ä—É–¥–Ω—ã—Ö –º—ã—à—Ü, –ø–ª–µ—á –∏ —Ç—Ä–∏—Ü–µ–ø—Å–∞",
    exercises: ["bench-press", "push-ups"],
    duration: 60
  },
  {
    id: "pull-day",
    name: "Pull Day (–¢—è–≥–∞)",
    description: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–ø–∏–Ω—ã –∏ –±–∏—Ü–µ–ø—Å–∞",
    exercises: ["pull-ups", "deadlift"],
    duration: 60
  },
  {
    id: "leg-day",
    name: "Leg Day (–ù–æ–≥–∏)",
    description: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —Ç–µ–ª–∞",
    exercises: ["squat", "deadlift"],
    duration: 75
  },
  {
    id: "cardio",
    name: "–ö–∞—Ä–¥–∏–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
    description: "–ê—ç—Ä–æ–±–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏",
    exercises: ["running", "plank"],
    duration: 45
  }
];

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–∏—Ç–Ω–µ—Å —Ç—Ä–µ–∫–µ—Ä–∞
export default function FitnessTracker() {
  const [currentView, setCurrentView] = useState<'dashboard' | 'workouts' | 'exercises' | 'progress' | 'goals' | 'calendar'>('dashboard');
  const [workoutSessions, setWorkoutSessions] = useState<WorkoutSession[]>([]);
  const [currentWorkout, setCurrentWorkout] = useState<WorkoutSession | null>(null);
  const [isWorkoutActive, setIsWorkoutActive] = useState(false);
  const [goals, setGoals] = useState<Goal[]>([]);
  const [achievements, setAchievements] = useState<Achievement[]>([]);
  const [userStats, setUserStats] = useState<UserStats>({
    totalWorkouts: 0,
    totalDuration: 0,
    totalWeight: 0,
    totalReps: 0,
    caloriesBurned: 0,
    currentStreak: 0,
    longestStreak: 0,
    favoriteExercise: "",
    achievements: [],
    level: 1,
    experience: 0
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
  useEffect(() => {
    const savedWorkouts = localStorage.getItem('fitness-workouts');
    if (savedWorkouts) {
      const workouts = JSON.parse(savedWorkouts).map((w: any) => ({
        ...w,
        date: new Date(w.date),
        startTime: w.startTime ? new Date(w.startTime) : undefined,
        endTime: w.endTime ? new Date(w.endTime) : undefined
      }));
      setWorkoutSessions(workouts);
    }

    const savedGoals = localStorage.getItem('fitness-goals');
    if (savedGoals) {
      const goals = JSON.parse(savedGoals).map((g: any) => ({
        ...g,
        deadline: new Date(g.deadline),
        createdAt: new Date(g.createdAt)
      }));
      setGoals(goals);
    }

    const savedStats = localStorage.getItem('fitness-stats');
    if (savedStats) {
      setUserStats(JSON.parse(savedStats));
    }

    const savedAchievements = localStorage.getItem('fitness-achievements');
    if (savedAchievements) {
      setAchievements(JSON.parse(savedAchievements).map((a: any) => ({
        ...a,
        unlockedAt: a.unlockedAt ? new Date(a.unlockedAt) : undefined
      })));
    } else {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      initializeAchievements();
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
  useEffect(() => {
    localStorage.setItem('fitness-workouts', JSON.stringify(workoutSessions));
  }, [workoutSessions]);

  useEffect(() => {
    localStorage.setItem('fitness-goals', JSON.stringify(goals));
  }, [goals]);

  useEffect(() => {
    localStorage.setItem('fitness-stats', JSON.stringify(userStats));
  }, [userStats]);

  useEffect(() => {
    localStorage.setItem('fitness-achievements', JSON.stringify(achievements));
  }, [achievements]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const initializeAchievements = () => {
    const initialAchievements: Achievement[] = [
      {
        id: "first-workout",
        title: "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏",
        description: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
        icon: "üéØ",
        category: "–ù–∞—á–∏–Ω–∞—é—â–∏–π",
        unlocked: false,
        requirement: "–ó–∞–≤–µ—Ä—à–∏—Ç—å 1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
        points: 10
      },
      {
        id: "week-streak",
        title: "–ù–µ–¥–µ–ª—è –≤ –¥–µ–ª–µ",
        description: "–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
        icon: "üî•",
        category: "–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ",
        unlocked: false,
        requirement: "7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
        points: 50
      },
      {
        id: "heavy-lifter",
        title: "–¢—è–∂–µ–ª–æ–≤–µ—Å",
        description: "–ü–æ–¥–Ω–∏–º–∏—Ç–µ 1000 –∫–≥ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
        icon: "üí™",
        category: "–°–∏–ª–∞",
        unlocked: false,
        requirement: "1000 –∫–≥ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
        points: 100
      },
      {
        id: "marathon-runner",
        title: "–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü",
        description: "–ü—Ä–æ–±–µ–≥–∏—Ç–µ 42.2 –∫–º —Å—É–º–º–∞—Ä–Ω–æ",
        icon: "üèÉ",
        category: "–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å",
        unlocked: false,
        requirement: "42.2 –∫–º –±–µ–≥–∞",
        points: 200
      },
      {
        id: "goal-crusher",
        title: "–ü–æ–∫–æ—Ä–∏—Ç–µ–ª—å —Ü–µ–ª–µ–π",
        description: "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 5 —Ü–µ–ª–µ–π",
        icon: "üèÜ",
        category: "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
        unlocked: false,
        requirement: "5 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã—Ö —Ü–µ–ª–µ–π",
        points: 150
      }
    ];
    setAchievements(initialAchievements);
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  const startWorkout = useCallback((templateId?: string) => {
    const template = workoutTemplates.find(t => t.id === templateId);
    const newWorkout: WorkoutSession = {
      id: `workout-${Date.now()}`,
      name: template?.name || "–ù–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
      date: new Date(),
      startTime: new Date(),
      duration: 0,
      sets: [],
      totalWeight: 0,
      totalReps: 0,
      calories: 0,
      completed: false
    };

    setCurrentWorkout(newWorkout);
    setIsWorkoutActive(true);
    setCurrentView('workouts');
  }, []);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –∞–∫—Ç–∏–≤–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
  const addExerciseToWorkout = useCallback((exerciseId: string) => {
    if (!currentWorkout) return;

    const newSet: WorkoutSet = {
      id: `set-${Date.now()}`,
      exerciseId,
      reps: 0,
      weight: 0,
      restTime: 60,
      completed: false
    };

    setCurrentWorkout(prev => prev ? {
      ...prev,
      sets: [...prev.sets, newSet]
    } : null);
  }, [currentWorkout]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∞
  const updateSet = useCallback((setId: string, updates: Partial<WorkoutSet>) => {
    if (!currentWorkout) return;

    setCurrentWorkout(prev => prev ? {
      ...prev,
      sets: prev.sets.map(set => 
        set.id === setId ? { ...set, ...updates } : set
      )
    } : null);
  }, [currentWorkout]);

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  const finishWorkout = useCallback(() => {
    if (!currentWorkout) return;

    const finishedWorkout: WorkoutSession = {
      ...currentWorkout,
      endTime: new Date(),
      duration: currentWorkout.startTime ? 
        Math.round((Date.now() - currentWorkout.startTime.getTime()) / 60000) : 0,
      totalWeight: currentWorkout.sets.reduce((sum, set) => 
        sum + (set.completed ? set.weight * set.reps : 0), 0),
      totalReps: currentWorkout.sets.reduce((sum, set) => 
        sum + (set.completed ? set.reps : 0), 0),
      calories: Math.round(currentWorkout.sets.length * 15 + (currentWorkout.duration || 0) * 5),
      completed: true
    };

    setWorkoutSessions(prev => [finishedWorkout, ...prev]);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    setUserStats(prev => ({
      ...prev,
      totalWorkouts: prev.totalWorkouts + 1,
      totalDuration: prev.totalDuration + finishedWorkout.duration,
      totalWeight: prev.totalWeight + finishedWorkout.totalWeight,
      totalReps: prev.totalReps + finishedWorkout.totalReps,
      caloriesBurned: prev.caloriesBurned + finishedWorkout.calories,
      experience: prev.experience + Math.round(finishedWorkout.duration / 2)
    }));

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    checkAchievements(finishedWorkout);

    setCurrentWorkout(null);
    setIsWorkoutActive(false);
    setCurrentView('dashboard');
  }, [currentWorkout]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const checkAchievements = useCallback((workout: WorkoutSession) => {
    setAchievements(prev => prev.map(achievement => {
      if (achievement.unlocked) return achievement;

      let shouldUnlock = false;

      switch (achievement.id) {
        case "first-workout":
          shouldUnlock = userStats.totalWorkouts >= 0; // –ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
          break;
        case "heavy-lifter":
          shouldUnlock = workout.totalWeight >= 1000;
          break;
        case "week-streak":
          shouldUnlock = userStats.currentStreak >= 7;
          break;
        case "marathon-runner":
          // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –±–µ–≥–∞
          shouldUnlock = false; // –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
          break;
        case "goal-crusher":
          shouldUnlock = goals.filter(g => g.completed).length >= 5;
          break;
      }

      if (shouldUnlock) {
        return {
          ...achievement,
          unlocked: true,
          unlockedAt: new Date()
        };
      }

      return achievement;
    }));
  }, [userStats, goals]);

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏
  const createGoal = useCallback((goalData: Omit<Goal, 'id' | 'currentValue' | 'completed' | 'createdAt'>) => {
    const newGoal: Goal = {
      ...goalData,
      id: `goal-${Date.now()}`,
      currentValue: 0,
      completed: false,
      createdAt: new Date()
    };

    setGoals(prev => [...prev, newGoal]);
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ü–µ–ª–∏
  const updateGoalProgress = useCallback((goalId: string, newValue: number) => {
    setGoals(prev => prev.map(goal => {
      if (goal.id === goalId) {
        const completed = newValue >= goal.targetValue;
        return {
          ...goal,
          currentValue: newValue,
          completed
        };
      }
      return goal;
    }));
  }, []);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
  const [exerciseFilter, setExerciseFilter] = useState('all');
  const [muscleGroupFilter, setMuscleGroupFilter] = useState('all');

  const filteredExercises = useMemo(() => {
    return exercisesData.filter(exercise => {
      const matchesCategory = exerciseFilter === 'all' || exercise.category === exerciseFilter;
      const matchesMuscleGroup = muscleGroupFilter === 'all' || 
        exercise.muscleGroups.includes(muscleGroupFilter);
      return matchesCategory && matchesMuscleGroup;
    });
  }, [exerciseFilter, muscleGroupFilter]);

  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –º—ã—à–µ—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã
  const categories = useMemo(() => {
    const allCategories = exercisesData.map(e => e.category);
    return Array.from(new Set(allCategories));
  }, []);

  const muscleGroups = useMemo(() => {
    const allMuscleGroups = exercisesData.flatMap(e => e.muscleGroups);
    return Array.from(new Set(allMuscleGroups));
  }, []);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  const recentWorkouts = useMemo(() => {
    return workoutSessions.slice(0, 5);
  }, [workoutSessions]);

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–∞—à–±–æ—Ä–¥–∞
  const Dashboard = () => (
    <div className="space-y-6">
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-slate-600 dark:text-slate-400">–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</p>
              <p className="text-2xl font-bold text-blue-600">{userStats.totalWorkouts}</p>
            </div>
            <div className="text-3xl">üèãÔ∏è</div>
          </div>
        </div>

        <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-slate-600 dark:text-slate-400">–ß–∞—Å–æ–≤</p>
              <p className="text-2xl font-bold text-green-600">
                {Math.round(userStats.totalDuration / 60)}
              </p>
            </div>
            <div className="text-3xl">‚è±Ô∏è</div>
          </div>
        </div>

        <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-slate-600 dark:text-slate-400">–ü–æ–¥–Ω—è—Ç–æ –∫–≥</p>
              <p className="text-2xl font-bold text-purple-600">
                {userStats.totalWeight.toLocaleString()}
              </p>
            </div>
            <div className="text-3xl">üí™</div>
          </div>
        </div>

        <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-slate-600 dark:text-slate-400">–ö–∞–ª–æ—Ä–∏–π</p>
              <p className="text-2xl font-bold text-orange-600">
                {userStats.caloriesBurned.toLocaleString()}
              </p>
            </div>
            <div className="text-3xl">üî•</div>
          </div>
        </div>
      </div>

      {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
      <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
        <h2 className="text-xl font-bold text-slate-900 dark:text-slate-100 mb-4">
          –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          {workoutTemplates.map(template => (
            <button
              key={template.id}
              onClick={() => startWorkout(template.id)}
              className="p-4 border border-slate-200 dark:border-slate-700 rounded-lg hover:bg-slate-50 dark:hover:bg-slate-700 transition-colors text-left"
            >
              <h3 className="font-semibold text-slate-900 dark:text-slate-100 mb-1">
                {template.name}
              </h3>
              <p className="text-sm text-slate-600 dark:text-slate-400 mb-2">
                {template.description}
              </p>
              <p className="text-xs text-slate-500">
                ~{template.duration} –º–∏–Ω
              </p>
            </button>
          ))}
        </div>
      </div>

      {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ */}
      <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
        <h2 className="text-xl font-bold text-slate-900 dark:text-slate-100 mb-4">
          –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        </h2>
        {recentWorkouts.length === 0 ? (
          <div className="text-center py-8">
            <div className="text-4xl mb-4">üèÉ</div>
            <p className="text-slate-600 dark:text-slate-400 mb-4">
              –ü–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            </p>
            <button
              onClick={() => startWorkout()}
              className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-medium"
            >
              –ù–∞—á–∞—Ç—å –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
            </button>
          </div>
        ) : (
          <div className="space-y-3">
            {recentWorkouts.map(workout => (
              <div key={workout.id} className="flex items-center justify-between p-3 border border-slate-200 dark:border-slate-700 rounded-lg">
                <div>
                  <h3 className="font-medium text-slate-900 dark:text-slate-100">
                    {workout.name}
                  </h3>
                  <p className="text-sm text-slate-600 dark:text-slate-400">
                    {workout.date.toLocaleDateString()} ‚Ä¢ {workout.duration} –º–∏–Ω ‚Ä¢ {workout.sets.length} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
                  </p>
                </div>
                <div className="text-right">
                  <p className="text-sm font-medium text-slate-900 dark:text-slate-100">
                    {workout.totalWeight} –∫–≥
                  </p>
                  <p className="text-xs text-slate-500">
                    {workout.calories} –∫–∫–∞–ª
                  </p>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* –ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏ */}
      <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-bold text-slate-900 dark:text-slate-100">
            –ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏
          </h2>
          <button
            onClick={() => setCurrentView('goals')}
            className="text-blue-600 hover:text-blue-700 font-medium"
          >
            –í—Å–µ —Ü–µ–ª–∏ ‚Üí
          </button>
        </div>
        
        {goals.filter(g => !g.completed).slice(0, 3).map(goal => (
          <div key={goal.id} className="mb-4 last:mb-0">
            <div className="flex justify-between items-center mb-2">
              <h3 className="font-medium text-slate-900 dark:text-slate-100">
                {goal.title}
              </h3>
              <span className="text-sm text-slate-600 dark:text-slate-400">
                {goal.currentValue}/{goal.targetValue} {goal.unit}
              </span>
            </div>
            <div className="w-full bg-slate-200 dark:bg-slate-700 rounded-full h-2">
              <div 
                className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${Math.min(100, (goal.currentValue / goal.targetValue) * 100)}%` }}
              ></div>
            </div>
          </div>
        ))}
        
        {goals.filter(g => !g.completed).length === 0 && (
          <p className="text-slate-600 dark:text-slate-400 text-center py-4">
            –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ü–µ–ª—å!
          </p>
        )}
      </div>
    </div>
  );

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  const ActiveWorkout = () => {
    if (!currentWorkout) return null;

    const [currentExerciseId, setCurrentExerciseId] = useState<string>('');
    const [showAddExercise, setShowAddExercise] = useState(false);

    return (
      <div className="space-y-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ */}
        <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-2xl font-bold text-slate-900 dark:text-slate-100">
                {currentWorkout.name}
              </h2>
              <p className="text-slate-600 dark:text-slate-400">
                –ù–∞—á–∞—Ç–∞: {currentWorkout.startTime?.toLocaleTimeString()}
              </p>
            </div>
            <div className="text-right">
              <button
                onClick={finishWorkout}
                className="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg font-medium mb-2"
              >
                –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
              </button>
              <p className="text-sm text-slate-600 dark:text-slate-400">
                –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {currentWorkout.sets.length}
              </p>
            </div>
          </div>
        </div>

        {/* –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ */}
        <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">
              –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            </h3>
            <button
              onClick={() => setShowAddExercise(!showAddExercise)}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium"
            >
              + –î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
            </button>
          </div>

          {showAddExercise && (
            <div className="mb-6 p-4 border border-slate-200 dark:border-slate-700 rounded-lg">
              <h4 className="font-medium text-slate-900 dark:text-slate-100 mb-3">
                –í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:
              </h4>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                {exercisesData.map(exercise => (
                  <button
                    key={exercise.id}
                    onClick={() => {
                      addExerciseToWorkout(exercise.id);
                      setShowAddExercise(false);
                    }}
                    className="p-3 text-left border border-slate-200 dark:border-slate-700 rounded-lg hover:bg-slate-50 dark:hover:bg-slate-700 transition-colors"
                  >
                    <div className="flex items-center space-x-3">
                      <span className="text-2xl">{exercise.image}</span>
                      <div>
                        <p className="font-medium text-slate-900 dark:text-slate-100">
                          {exercise.name}
                        </p>
                        <p className="text-sm text-slate-600 dark:text-slate-400">
                          {exercise.muscleGroups.join(", ")}
                        </p>
                      </div>
                    </div>
                  </button>
                ))}
              </div>
            </div>
          )}

          {currentWorkout.sets.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-slate-600 dark:text-slate-400">
                –î–æ–±–∞–≤—å—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              {currentWorkout.sets.map((set, index) => {
                const exercise = exercisesData.find(e => e.id === set.exerciseId);
                if (!exercise) return null;

                return (
                  <div key={set.id} className="p-4 border border-slate-200 dark:border-slate-700 rounded-lg">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center space-x-3">
                        <span className="text-2xl">{exercise.image}</span>
                        <div>
                          <h4 className="font-medium text-slate-900 dark:text-slate-100">
                            {exercise.name}
                          </h4>
                          <p className="text-sm text-slate-600 dark:text-slate-400">
                            –ü–æ–¥—Ö–æ–¥ {index + 1}
                          </p>
                        </div>
                      </div>
                      <button
                        onClick={() => updateSet(set.id, { completed: !set.completed })}
                        className={`px-4 py-2 rounded-lg font-medium ${
                          set.completed
                            ? 'bg-green-600 text-white'
                            : 'bg-slate-200 dark:bg-slate-700 text-slate-700 dark:text-slate-300'
                        }`}
                      >
                        {set.completed ? '‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–æ' : '–í—ã–ø–æ–ª–Ω–∏—Ç—å'}
                      </button>
                    </div>

                    <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                      <div>
                        <label className="block text-xs text-slate-600 dark:text-slate-400 mb-1">
                          –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                        </label>
                        <input
                          type="number"
                          value={set.reps}
                          onChange={(e) => updateSet(set.id, { reps: parseInt(e.target.value) || 0 })}
                          className="w-full px-3 py-1 border border-slate-300 dark:border-slate-600 rounded focus:ring-2 focus:ring-blue-500 dark:bg-slate-700 dark:text-white"
                        />
                      </div>
                      <div>
                        <label className="block text-xs text-slate-600 dark:text-slate-400 mb-1">
                          –í–µ—Å (–∫–≥)
                        </label>
                        <input
                          type="number"
                          value={set.weight}
                          onChange={(e) => updateSet(set.id, { weight: parseFloat(e.target.value) || 0 })}
                          className="w-full px-3 py-1 border border-slate-300 dark:border-slate-600 rounded focus:ring-2 focus:ring-blue-500 dark:bg-slate-700 dark:text-white"
                        />
                      </div>
                      <div>
                        <label className="block text-xs text-slate-600 dark:text-slate-400 mb-1">
                          –û—Ç–¥—ã—Ö (—Å–µ–∫)
                        </label>
                        <input
                          type="number"
                          value={set.restTime}
                          onChange={(e) => updateSet(set.id, { restTime: parseInt(e.target.value) || 0 })}
                          className="w-full px-3 py-1 border border-slate-300 dark:border-slate-600 rounded focus:ring-2 focus:ring-blue-500 dark:bg-slate-700 dark:text-white"
                        />
                      </div>
                      <div className="flex items-end">
                        <button
                          onClick={() => {
                            setCurrentWorkout(prev => prev ? {
                              ...prev,
                              sets: prev.sets.filter(s => s.id !== set.id)
                            } : null);
                          }}
                          className="w-full bg-red-100 dark:bg-red-900/30 text-red-600 py-1 rounded hover:bg-red-200 dark:hover:bg-red-900/50"
                        >
                          –£–¥–∞–ª–∏—Ç—å
                        </button>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>
      </div>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
  const ExerciseLibrary = () => (
    <div className="space-y-6">
      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <select
            value={exerciseFilter}
            onChange={(e) => setExerciseFilter(e.target.value)}
            className="px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-slate-700 dark:text-white"
          >
            <option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
            {categories.map(category => (
              <option key={category} value={category}>{category}</option>
            ))}
          </select>
          <select
            value={muscleGroupFilter}
            onChange={(e) => setMuscleGroupFilter(e.target.value)}
            className="px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-slate-700 dark:text-white"
          >
            <option value="all">–í—Å–µ –º—ã—à–µ—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã</option>
            {muscleGroups.map(group => (
              <option key={group} value={group}>{group}</option>
            ))}
          </select>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredExercises.map(exercise => (
          <div key={exercise.id} className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
            <div className="text-center mb-4">
              <div className="text-4xl mb-2">{exercise.image}</div>
              <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">
                {exercise.name}
              </h3>
              <p className="text-sm text-slate-600 dark:text-slate-400">
                {exercise.category}
              </p>
            </div>

            <div className="space-y-3">
              <div>
                <p className="text-sm font-medium text-slate-700 dark:text-slate-300">
                  –ú—ã—à–µ—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã:
                </p>
                <div className="flex flex-wrap gap-1 mt-1">
                  {exercise.muscleGroups.map(group => (
                    <span
                      key={group}
                      className="px-2 py-1 bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200 text-xs rounded"
                    >
                      {group}
                    </span>
                  ))}
                </div>
              </div>

              <div>
                <p className="text-sm font-medium text-slate-700 dark:text-slate-300">
                  –°–ª–æ–∂–Ω–æ—Å—Ç—å:
                </p>
                <span className={`text-sm px-2 py-1 rounded ${
                  exercise.difficulty === '–ù–∞—á–∏–Ω–∞—é—â–∏–π' ? 'bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200' :
                  exercise.difficulty === '–°—Ä–µ–¥–Ω–∏–π' ? 'bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-200' :
                  'bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200'
                }`}>
                  {exercise.difficulty}
                </span>
              </div>

              <p className="text-sm text-slate-600 dark:text-slate-400">
                {exercise.description}
              </p>

              {isWorkoutActive && (
                <button
                  onClick={() => addExerciseToWorkout(exercise.id)}
                  className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg font-medium"
                >
                  –î–æ–±–∞–≤–∏—Ç—å –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
                </button>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ü–µ–ª–µ–π
  const Goals = () => {
    const [showCreateGoal, setShowCreateGoal] = useState(false);
    const [newGoal, setNewGoal] = useState({
      type: 'weight' as Goal['type'],
      title: '',
      description: '',
      targetValue: 0,
      unit: '–∫–≥',
      deadline: '',
      category: '–°–∏–ª–∞'
    });

    const handleCreateGoal = (e: React.FormEvent) => {
      e.preventDefault();
      if (newGoal.title && newGoal.targetValue > 0 && newGoal.deadline) {
        createGoal({
          ...newGoal,
          deadline: new Date(newGoal.deadline)
        });
        setNewGoal({
          type: 'weight',
          title: '',
          description: '',
          targetValue: 0,
          unit: '–∫–≥',
          deadline: '',
          category: '–°–∏–ª–∞'
        });
        setShowCreateGoal(false);
      }
    };

    return (
      <div className="space-y-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è */}
        <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold text-slate-900 dark:text-slate-100">
              –ú–æ–∏ —Ü–µ–ª–∏
            </h2>
            <button
              onClick={() => setShowCreateGoal(!showCreateGoal)}
              className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-medium"
            >
              + –ù–æ–≤–∞—è —Ü–µ–ª—å
            </button>
          </div>
        </div>

        {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏ */}
        {showCreateGoal && (
          <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4">
              –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å
            </h3>
            <form onSubmit={handleCreateGoal} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <input
                  type="text"
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏"
                  value={newGoal.title}
                  onChange={(e) => setNewGoal({...newGoal, title: e.target.value})}
                  required
                  className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-slate-700 dark:text-white"
                />
                <select
                  value={newGoal.type}
                  onChange={(e) => setNewGoal({...newGoal, type: e.target.value as Goal['type']})}
                  className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-slate-700 dark:text-white"
                >
                  <option value="weight">–í–µ—Å</option>
                  <option value="reps">–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è</option>
                  <option value="duration">–í—Ä–µ–º—è</option>
                  <option value="frequency">–ß–∞—Å—Ç–æ—Ç–∞</option>
                </select>
              </div>
              
              <textarea
                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏"
                value={newGoal.description}
                onChange={(e) => setNewGoal({...newGoal, description: e.target.value})}
                rows={3}
                className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-slate-700 dark:text-white resize-none"
              />

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <input
                  type="number"
                  placeholder="–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
                  value={newGoal.targetValue || ''}
                  onChange={(e) => setNewGoal({...newGoal, targetValue: parseFloat(e.target.value) || 0})}
                  required
                  className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-slate-700 dark:text-white"
                />
                <input
                  type="text"
                  placeholder="–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è"
                  value={newGoal.unit}
                  onChange={(e) => setNewGoal({...newGoal, unit: e.target.value})}
                  className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-slate-700 dark:text-white"
                />
                <input
                  type="date"
                  value={newGoal.deadline}
                  onChange={(e) => setNewGoal({...newGoal, deadline: e.target.value})}
                  required
                  className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-slate-700 dark:text-white"
                />
              </div>

              <div className="flex space-x-4">
                <button
                  type="submit"
                  className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-medium"
                >
                  –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å
                </button>
                <button
                  type="button"
                  onClick={() => setShowCreateGoal(false)}
                  className="bg-slate-600 hover:bg-slate-700 text-white px-6 py-2 rounded-lg font-medium"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </form>
          </div>
        )}

        {/* –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {goals.map(goal => (
            <div key={goal.id} className={`rounded-lg shadow-md p-6 ${
              goal.completed ? 'bg-green-50 dark:bg-green-900/20' : 'bg-white dark:bg-slate-800'
            }`}>
              <div className="flex items-start justify-between mb-4">
                <div>
                  <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">
                    {goal.title}
                  </h3>
                  <p className="text-sm text-slate-600 dark:text-slate-400">
                    {goal.description}
                  </p>
                </div>
                {goal.completed && (
                  <span className="bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200 px-2 py-1 rounded text-sm">
                    ‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–æ
                  </span>
                )}
              </div>

              <div className="mb-4">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-sm text-slate-600 dark:text-slate-400">–ü—Ä–æ–≥—Ä–µ—Å—Å:</span>
                  <span className="text-sm font-medium">
                    {goal.currentValue}/{goal.targetValue} {goal.unit}
                  </span>
                </div>
                <div className="w-full bg-slate-200 dark:bg-slate-700 rounded-full h-2">
                  <div 
                    className={`h-2 rounded-full transition-all duration-300 ${
                      goal.completed ? 'bg-green-600' : 'bg-blue-600'
                    }`}
                    style={{ width: `${Math.min(100, (goal.currentValue / goal.targetValue) * 100)}%` }}
                  ></div>
                </div>
              </div>

              <div className="flex justify-between items-center text-sm text-slate-600 dark:text-slate-400">
                <span>–°—Ä–æ–∫: {goal.deadline.toLocaleDateString()}</span>
                <span>{goal.category}</span>
              </div>

              {!goal.completed && (
                <div className="mt-4 flex space-x-2">
                  <input
                    type="number"
                    placeholder="–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"
                    className="flex-1 px-3 py-1 border border-slate-300 dark:border-slate-600 rounded focus:ring-2 focus:ring-blue-500 dark:bg-slate-700 dark:text-white"
                    onKeyPress={(e) => {
                      if (e.key === 'Enter') {
                        const value = parseFloat((e.target as HTMLInputElement).value);
                        if (value >= 0) {
                          updateGoalProgress(goal.id, value);
                          (e.target as HTMLInputElement).value = '';
                        }
                      }
                    }}
                  />
                  <button
                    onClick={() => {
                      const input = document.querySelector(`input[placeholder="–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"]`) as HTMLInputElement;
                      const value = parseFloat(input?.value || '0');
                      if (value >= 0) {
                        updateGoalProgress(goal.id, value);
                        if (input) input.value = '';
                      }
                    }}
                    className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm"
                  >
                    –û–±–Ω–æ–≤–∏—Ç—å
                  </button>
                </div>
              )}
            </div>
          ))}
        </div>

        {goals.length === 0 && (
          <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-8 text-center">
            <div className="text-4xl mb-4">üéØ</div>
            <h3 className="text-xl font-bold text-slate-900 dark:text-slate-100 mb-2">
              –ü–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π
            </h3>
            <p className="text-slate-600 dark:text-slate-400 mb-4">
              –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ü–µ–ª—å –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏!
            </p>
          </div>
        )}
      </div>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const Achievements = () => (
    <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
      <h2 className="text-2xl font-bold text-slate-900 dark:text-slate-100 mb-6">
        üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      </h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {achievements.map(achievement => (
          <div
            key={achievement.id}
            className={`p-4 rounded-lg border ${
              achievement.unlocked
                ? 'bg-yellow-50 dark:bg-yellow-900/20 border-yellow-200 dark:border-yellow-800'
                : 'bg-slate-50 dark:bg-slate-700 border-slate-200 dark:border-slate-600'
            }`}
          >
            <div className="flex items-center space-x-3">
              <div className={`text-2xl ${achievement.unlocked ? '' : 'grayscale opacity-50'}`}>
                {achievement.icon}
              </div>
              <div className="flex-1">
                <h3 className={`font-medium ${
                  achievement.unlocked 
                    ? 'text-yellow-800 dark:text-yellow-200' 
                    : 'text-slate-600 dark:text-slate-400'
                }`}>
                  {achievement.title}
                </h3>
                <p className="text-xs text-slate-500 dark:text-slate-500">
                  {achievement.description}
                </p>
                <p className="text-xs text-slate-500 dark:text-slate-500 mt-1">
                  {achievement.requirement}
                </p>
                {achievement.unlocked && achievement.unlockedAt && (
                  <p className="text-xs text-yellow-600 dark:text-yellow-400 mt-1">
                    –ü–æ–ª—É—á–µ–Ω–æ: {achievement.unlockedAt.toLocaleDateString()}
                  </p>
                )}
              </div>
              <div className="text-right">
                <span className="text-sm font-medium text-blue-600">
                  {achievement.points} XP
                </span>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800">
      <div className="container mx-auto px-4 py-8 max-w-6xl">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-4xl font-bold text-slate-900 dark:text-slate-100 mb-2">
              üèãÔ∏è –§–∏—Ç–Ω–µ—Å —Ç—Ä–µ–∫–µ—Ä
            </h1>
            <p className="text-lg text-slate-600 dark:text-slate-400">
              –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ —Ü–µ–ª–µ–π, –±—É–¥—å—Ç–µ –≤ —Ñ–æ—Ä–º–µ
            </p>
          </div>
          
          <Link 
            href="/"
            className="bg-slate-900 dark:bg-slate-100 text-white dark:text-slate-900 px-6 py-2 rounded-lg font-medium hover:bg-slate-800 dark:hover:bg-slate-200 transition-colors"
          >
            ‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é
          </Link>
        </div>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-4 mb-8">
          <div className="flex flex-wrap gap-2">
            <button
              onClick={() => setCurrentView('dashboard')}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                currentView === 'dashboard'
                  ? 'bg-blue-600 text-white'
                  : 'bg-slate-200 dark:bg-slate-700 text-slate-700 dark:text-slate-300 hover:bg-slate-300 dark:hover:bg-slate-600'
              }`}
            >
              üìä –î–∞—à–±–æ—Ä–¥
            </button>
            {isWorkoutActive ? (
              <button
                onClick={() => setCurrentView('workouts')}
                className="px-4 py-2 rounded-lg font-medium bg-green-600 text-white animate-pulse"
              >
                üèÉ –ê–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
              </button>
            ) : (
              <button
                onClick={() => startWorkout()}
                className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                  currentView === 'workouts'
                    ? 'bg-blue-600 text-white'
                    : 'bg-slate-200 dark:bg-slate-700 text-slate-700 dark:text-slate-300 hover:bg-slate-300 dark:hover:bg-slate-600'
                }`}
              >
                üèãÔ∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
              </button>
            )}
            <button
              onClick={() => setCurrentView('exercises')}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                currentView === 'exercises'
                  ? 'bg-blue-600 text-white'
                  : 'bg-slate-200 dark:bg-slate-700 text-slate-700 dark:text-slate-300 hover:bg-slate-300 dark:hover:bg-slate-600'
              }`}
            >
              üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            </button>
            <button
              onClick={() => setCurrentView('goals')}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                currentView === 'goals'
                  ? 'bg-blue-600 text-white'
                  : 'bg-slate-200 dark:bg-slate-700 text-slate-700 dark:text-slate-300 hover:bg-slate-300 dark:hover:bg-slate-600'
              }`}
            >
              üéØ –¶–µ–ª–∏ ({goals.filter(g => !g.completed).length})
            </button>
            <button
              onClick={() => setCurrentView('progress')}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                currentView === 'progress'
                  ? 'bg-blue-600 text-white'
                  : 'bg-slate-200 dark:bg-slate-700 text-slate-700 dark:text-slate-300 hover:bg-slate-300 dark:hover:bg-slate-600'
              }`}
            >
              üìà –ü—Ä–æ–≥—Ä–µ—Å—Å
            </button>
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        {currentView === 'dashboard' && <Dashboard />}
        {currentView === 'workouts' && isWorkoutActive && <ActiveWorkout />}
        {currentView === 'exercises' && <ExerciseLibrary />}
        {currentView === 'goals' && <Goals />}
        {currentView === 'progress' && <Achievements />}

        {/* Footer */}
        <footer className="mt-12 text-center">
          <p className="text-slate-500 dark:text-slate-500 text-sm">
            üí™ –ö–∞–∂–¥–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —Ü–µ–ª–∏!
          </p>
        </footer>
      </div>
    </div>
  );
}
