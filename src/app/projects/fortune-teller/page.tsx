"use client";

import { useState, useEffect, useCallback, useMemo } from "react";
import Link from "next/link";

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≥–∞–¥–∞–Ω–∏–π
interface TarotCard {
  id: string;
  name: string;
  nameRu: string;
  suit: 'major' | 'cups' | 'wands' | 'swords' | 'pentacles';
  number?: number;
  keywords: string[];
  meaning: {
    upright: string;
    reversed: string;
  };
  image: string;
  element?: string;
  planet?: string;
}

interface TarotReading {
  id: string;
  type: 'single' | 'three-card' | 'celtic-cross';
  question: string;
  cards: {
    card: TarotCard;
    position: string;
    reversed: boolean;
  }[];
  interpretation: string;
  date: Date;
  mood: 'positive' | 'neutral' | 'challenging';
}

interface ZodiacSign {
  id: string;
  name: string;
  nameRu: string;
  dates: string;
  element: 'fire' | 'earth' | 'air' | 'water';
  quality: 'cardinal' | 'fixed' | 'mutable';
  planet: string;
  symbol: string;
  traits: string[];
  compatibility: string[];
}

interface Horoscope {
  sign: string;
  period: 'daily' | 'weekly' | 'monthly';
  prediction: string;
  luckNumber: number;
  luckColor: string;
  advice: string;
  mood: 'excellent' | 'good' | 'neutral' | 'challenging';
  date: Date;
}

interface RuneStone {
  id: string;
  name: string;
  nameRu: string;
  symbol: string;
  meaning: string;
  keywords: string[];
  element?: string;
  description: string;
}

interface Fortune {
  id: string;
  type: 'crystal-ball' | 'rune' | 'fortune-cookie';
  question?: string;
  result: string;
  advice: string;
  date: Date;
}

interface UserProfile {
  birthDate?: Date;
  zodiacSign?: string;
  favoriteCards: string[];
  readingsCount: number;
  fortunesCount: number;
  level: number;
  experience: number;
  achievements: string[];
}

// –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç –¢–∞—Ä–æ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
const tarotCards: TarotCard[] = [
  {
    id: "fool",
    name: "The Fool",
    nameRu: "–î—É—Ä–∞–∫",
    suit: "major",
    number: 0,
    keywords: ["–Ω–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è", "—Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å", "–≤–µ—Ä–∞"],
    meaning: {
      upright: "–ù–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è, —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å, –≤–µ—Ä–∞ –≤ –±—É–¥—É—â–µ–µ. –í—Ä–µ–º—è –¥–ª—è —Å–º–µ–ª—ã—Ö —Ä–µ—à–µ–Ω–∏–π.",
      reversed: "–ù–µ–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å, –±–µ–∑—Ä–∞—Å—Å—É–¥—Å—Ç–≤–æ, —Å—Ç—Ä–∞—Ö –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º."
    },
    image: "üÉè",
    element: "–í–æ–∑–¥—É—Ö",
    planet: "–£—Ä–∞–Ω"
  },
  {
    id: "magician",
    name: "The Magician",
    nameRu: "–ú–∞–≥",
    suit: "major",
    number: 1,
    keywords: ["—Å–∏–ª–∞ –≤–æ–ª–∏", "–º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ", "–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è"],
    meaning: {
      upright: "–£ –≤–∞—Å –µ—Å—Ç—å –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏. –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.",
      reversed: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª."
    },
    image: "üé©",
    element: "–í–æ–∑–¥—É—Ö",
    planet: "–ú–µ—Ä–∫—É—Ä–∏–π"
  },
  {
    id: "high-priestess",
    name: "The High Priestess",
    nameRu: "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞",
    suit: "major",
    number: 2,
    keywords: ["–∏–Ω—Ç—É–∏—Ü–∏—è", "—Ç–∞–π–Ω—ã", "–ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ"],
    meaning: {
      upright: "–î–æ–≤–µ—Ä—å—Ç–µ—Å—å –∏–Ω—Ç—É–∏—Ü–∏–∏. –¢–∞–π–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –æ—Ç–∫—Ä–æ—é—Ç—Å—è –≤–∞–º.",
      reversed: "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≥–æ–ª–æ—Å–∞, –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ—Å—Ç—å."
    },
    image: "üåô",
    element: "–í–æ–¥–∞",
    planet: "–õ—É–Ω–∞"
  },
  {
    id: "empress",
    name: "The Empress",
    nameRu: "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞",
    suit: "major",
    number: 3,
    keywords: ["–º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ", "–ø–ª–æ–¥–æ—Ä–æ–¥–∏–µ", "–ø—Ä–∏—Ä–æ–¥–∞"],
    meaning: {
      upright: "–í—Ä–µ–º—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ —Ä–æ—Å—Ç–∞. –ò–∑–æ–±–∏–ª–∏–µ –≤–æ –≤—Å–µ—Ö —Å—Ñ–µ—Ä–∞—Ö –∂–∏–∑–Ω–∏.",
      reversed: "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –¥—Ä—É–≥–∏—Ö."
    },
    image: "üëë",
    element: "–ó–µ–º–ª—è",
    planet: "–í–µ–Ω–µ—Ä–∞"
  },
  {
    id: "emperor",
    name: "The Emperor",
    nameRu: "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä",
    suit: "major",
    number: 4,
    keywords: ["–≤–ª–∞—Å—Ç—å", "—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", "–ø–æ—Ä—è–¥–æ–∫"],
    meaning: {
      upright: "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å —Å–∏—Ç—É–∞—Ü–∏–∏. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –≤–∞–∂–Ω—ã.",
      reversed: "–ê–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω–æ—Å—Ç—å, –ø–æ—Ç–µ—Ä—è –∫–æ–Ω—Ç—Ä–æ–ª—è, —Ö–∞–æ—Å."
    },
    image: "üë§",
    element: "–û–≥–æ–Ω—å",
    planet: "–ú–∞—Ä—Å"
  },
  {
    id: "lovers",
    name: "The Lovers",
    nameRu: "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ",
    suit: "major",
    number: 6,
    keywords: ["–ª—é–±–æ–≤—å", "–≤—ã–±–æ—Ä", "–≥–∞—Ä–º–æ–Ω–∏—è"],
    meaning: {
      upright: "–í–∞–∂–Ω—ã–π –≤—ã–±–æ—Ä –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö. –ì–∞—Ä–º–æ–Ω–∏—è –∏ –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ.",
      reversed: "–†–∞–∑–ª–∞–¥ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä."
    },
    image: "üíï",
    element: "–í–æ–∑–¥—É—Ö",
    planet: "–ë–ª–∏–∑–Ω–µ—Ü—ã"
  },
  {
    id: "death",
    name: "Death",
    nameRu: "–°–º–µ—Ä—Ç—å",
    suit: "major",
    number: 13,
    keywords: ["—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è", "–∫–æ–Ω–µ—Ü", "–Ω–æ–≤–æ–µ –Ω–∞—á–∞–ª–æ"],
    meaning: {
      upright: "–û–∫–æ–Ω—á–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ –∏ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ. –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–∏–∑–±–µ–∂–Ω–∞.",
      reversed: "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–∞–º, –∑–∞—Å—Ç–æ–π."
    },
    image: "‚ö∞Ô∏è",
    element: "–í–æ–¥–∞",
    planet: "–°–∫–æ—Ä–ø–∏–æ–Ω"
  },
  {
    id: "sun",
    name: "The Sun",
    nameRu: "–°–æ–ª–Ω—Ü–µ",
    suit: "major",
    number: 19,
    keywords: ["—Ä–∞–¥–æ—Å—Ç—å", "—É—Å–ø–µ—Ö", "—ç–Ω–µ—Ä–≥–∏—è"],
    meaning: {
      upright: "–£—Å–ø–µ—Ö, —Ä–∞–¥–æ—Å—Ç—å, –ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è. –í—Å–µ –∏–¥–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!",
      reversed: "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏."
    },
    image: "‚òÄÔ∏è",
    element: "–û–≥–æ–Ω—å",
    planet: "–°–æ–ª–Ω—Ü–µ"
  }
];

// –ó–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞
const zodiacSigns: ZodiacSign[] = [
  {
    id: "aries",
    name: "Aries",
    nameRu: "–û–≤–µ–Ω",
    dates: "21 –º–∞—Ä - 19 –∞–ø—Ä",
    element: "fire",
    quality: "cardinal",
    planet: "–ú–∞—Ä—Å",
    symbol: "‚ôà",
    traits: ["—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π", "–ª–∏–¥–µ—Ä", "–∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã–π", "—Å–º–µ–ª—ã–π"],
    compatibility: ["–õ–µ–≤", "–°—Ç—Ä–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã"]
  },
  {
    id: "taurus",
    name: "Taurus",
    nameRu: "–¢–µ–ª–µ—Ü",
    dates: "20 –∞–ø—Ä - 20 –º–∞—è",
    element: "earth",
    quality: "fixed",
    planet: "–í–µ–Ω–µ—Ä–∞",
    symbol: "‚ôâ",
    traits: ["—Å—Ç–∞–±–∏–ª—å–Ω—ã–π", "—É–ø–æ—Ä–Ω—ã–π", "–ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π", "—á—É–≤—Å—Ç–≤–µ–Ω–Ω—ã–π"],
    compatibility: ["–î–µ–≤–∞", "–ö–æ–∑–µ—Ä–æ–≥", "–†–∞–∫"]
  },
  {
    id: "gemini",
    name: "Gemini",
    nameRu: "–ë–ª–∏–∑–Ω–µ—Ü—ã",
    dates: "21 –º–∞—è - 20 –∏—é–Ω",
    element: "air",
    quality: "mutable",
    planet: "–ú–µ—Ä–∫—É—Ä–∏–π",
    symbol: "‚ôä",
    traits: ["–æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π", "–ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π", "–∏–∑–º–µ–Ω—á–∏–≤—ã–π", "—É–º–Ω—ã–π"],
    compatibility: ["–í–µ—Å—ã", "–í–æ–¥–æ–ª–µ–π", "–û–≤–µ–Ω"]
  },
  {
    id: "cancer",
    name: "Cancer",
    nameRu: "–†–∞–∫",
    dates: "21 –∏—é–Ω - 22 –∏—é–ª",
    element: "water",
    quality: "cardinal",
    planet: "–õ—É–Ω–∞",
    symbol: "‚ôã",
    traits: ["—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π", "–∑–∞–±–æ—Ç–ª–∏–≤—ã–π", "–∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π", "–¥–æ–º–∞—à–Ω–∏–π"],
    compatibility: ["–°–∫–æ—Ä–ø–∏–æ–Ω", "–†—ã–±—ã", "–¢–µ–ª–µ—Ü"]
  },
  {
    id: "leo",
    name: "Leo",
    nameRu: "–õ–µ–≤",
    dates: "23 –∏—é–ª - 22 –∞–≤–≥",
    element: "fire",
    quality: "fixed",
    planet: "–°–æ–ª–Ω—Ü–µ",
    symbol: "‚ôå",
    traits: ["–≥–æ—Ä–¥—ã–π", "—â–µ–¥—Ä—ã–π", "—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π", "–ª–∏–¥–µ—Ä"],
    compatibility: ["–û–≤–µ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã"]
  },
  {
    id: "virgo",
    name: "Virgo",
    nameRu: "–î–µ–≤–∞",
    dates: "23 –∞–≤–≥ - 22 —Å–µ–Ω",
    element: "earth",
    quality: "mutable",
    planet: "–ú–µ—Ä–∫—É—Ä–∏–π",
    symbol: "‚ôç",
    traits: ["–∞–Ω–∞–ª–∏—Ç–∏—á–Ω—ã–π", "–ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π", "–ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç", "—Å–∫—Ä–æ–º–Ω—ã–π"],
    compatibility: ["–¢–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–†–∞–∫"]
  }
];

// –†—É–Ω—ã
const runeStones: RuneStone[] = [
  {
    id: "fehu",
    name: "Fehu",
    nameRu: "–§–µ—Ö—É",
    symbol: "·ö†",
    meaning: "–ë–æ–≥–∞—Ç—Å—Ç–≤–æ, –¥–µ–Ω—å–≥–∏, —É—Å–ø–µ—Ö –≤ –¥–µ–ª–∞—Ö",
    keywords: ["–±–æ–≥–∞—Ç—Å—Ç–≤–æ", "—É—Å–ø–µ—Ö", "—ç–Ω–µ—Ä–≥–∏—è", "–Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"],
    element: "–û–≥–æ–Ω—å",
    description: "–†—É–Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è –∏ –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π."
  },
  {
    id: "uruz",
    name: "Uruz",
    nameRu: "–£—Ä—É–∑",
    symbol: "·ö¢",
    meaning: "–°–∏–ª–∞, –∑–¥–æ—Ä–æ–≤—å–µ, –∂–∏–∑–Ω–µ–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è",
    keywords: ["—Å–∏–ª–∞", "–∑–¥–æ—Ä–æ–≤—å–µ", "–¥–∏–∫–∞—è –ø—Ä–∏—Ä–æ–¥–∞", "–ø–µ—Ä–≤–æ–±—ã—Ç–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è"],
    element: "–ó–µ–º–ª—è",
    description: "–†—É–Ω–∞ –ø–µ—Ä–≤–æ–±—ã—Ç–Ω–æ–π —Å–∏–ª—ã –∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏."
  },
  {
    id: "ansuz",
    name: "Ansuz",
    nameRu: "–ê–Ω—Å—É–∑",
    symbol: "·ö®",
    meaning: "–ó–Ω–∞–Ω–∏—è, –æ–±—â–µ–Ω–∏–µ, –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å",
    keywords: ["–º—É–¥—Ä–æ—Å—Ç—å", "–æ–±—â–µ–Ω–∏–µ", "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ", "–±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–∞—Ä"],
    element: "–í–æ–∑–¥—É—Ö",
    description: "–†—É–Ω–∞ –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –º—É–¥—Ä–æ—Å—Ç–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è."
  },
  {
    id: "raidho",
    name: "Raidho",
    nameRu: "–†–∞–π–¥–æ",
    symbol: "·ö±",
    meaning: "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –¥–≤–∏–∂–µ–Ω–∏–µ, –ø—Ä–æ–≥—Ä–µ—Å—Å",
    keywords: ["–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ", "–¥–≤–∏–∂–µ–Ω–∏–µ", "—Ä–∏—Ç–º", "–ø—Ä–æ–≥—Ä–µ—Å—Å"],
    element: "–í–æ–∑–¥—É—Ö",
    description: "–†—É–Ω–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∏ –¥—É—Ö–æ–≤–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è."
  },
  {
    id: "algiz",
    name: "Algiz",
    nameRu: "–ê–ª—å–≥–∏–∑",
    symbol: "·õâ",
    meaning: "–ó–∞—â–∏—Ç–∞, –¥—É—Ö–æ–≤–Ω–∞—è —Å–≤—è–∑—å, –≤—ã—Å—à–∏–µ —Å–∏–ª—ã",
    keywords: ["–∑–∞—â–∏—Ç–∞", "—Å–≤—è–∑—å —Å –±–æ–≥–∞–º–∏", "–∏–Ω—Ç—É–∏—Ü–∏—è", "–¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å"],
    element: "–í–æ–∑–¥—É—Ö",
    description: "–†—É–Ω–∞ –∑–∞—â–∏—Ç—ã –∏ —Å–≤—è–∑–∏ —Å –≤—ã—Å—à–∏–º–∏ —Å–∏–ª–∞–º–∏."
  }
];

// –ì–æ—Ç–æ–≤—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
const fortunePredictions = {
  love: [
    "üíï –°–∫–æ—Ä–æ –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏ –ø–æ—è–≤–∏—Ç—Å—è –æ—Å–æ–±–µ–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω–∏—Ç –≤–∞—à –≤–∑–≥–ª—è–¥ –Ω–∞ –ª—é–±–æ–≤—å.",
    "‚ù§Ô∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —É–∫—Ä–µ–ø—è—Ç—Å—è –±–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞—à–µ–π –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏ –∏ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏.",
    "üíñ –í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–∏—Ç—å –ø—Ä–æ—à–ª—ã–µ –æ–±–∏–¥—ã –∏ –æ—Ç–∫—Ä—ã—Ç—å —Å–µ—Ä–¥—Ü–µ –¥–ª—è –Ω–æ–≤—ã—Ö —á—É–≤—Å—Ç–≤.",
    "üíù –õ—é–±–æ–≤—å –ø—Ä–∏–¥–µ—Ç –∫ –≤–∞–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ, –±—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ —Å—é—Ä–ø—Ä–∏–∑–∞–º —Å—É–¥—å–±—ã.",
    "üíò –í–∞—à–∞ –¥—É—à–µ–≤–Ω–∞—è —Ç–µ–ø–ª–æ—Ç–∞ –ø—Ä–∏—Ç—è–Ω–µ—Ç –∫ –≤–∞–º —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—É—é –¥—É—à—É."
  ],
  career: [
    "üíº –ù–æ–≤—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä–æ—é—Ç—Å—è –±–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞—à–∏–º —Å–∫—Ä—ã—Ç—ã–º —Ç–∞–ª–∞–Ω—Ç–∞–º.",
    "üìà –í–∞—à–∞ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∏ —Ç—Ä—É–¥–æ–ª—é–±–∏–µ –≤—Å–∫–æ—Ä–µ –ø—Ä–∏–Ω–µ—Å—É—Ç –∑–∞—Å–ª—É–∂–µ–Ω–Ω–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ.",
    "üéØ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Ü–µ–ª–∏ - —É—Å–ø–µ—Ö –Ω–µ –∑–∞—Å—Ç–∞–≤–∏—Ç —Å–µ–±—è –∂–¥–∞—Ç—å.",
    "üí° –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–Ω–µ—Å–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –ø–ª–æ–¥—ã.",
    "üåü –õ–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—è–≤—è—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ."
  ],
  health: [
    "üå± –í—Ä–µ–º—è –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ - –≤–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –∏ –ª—é–±–≤–∏.",
    "‚ö° –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–º–æ–≥—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å.",
    "üèÉ‚Äç‚ôÄÔ∏è –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–µ—Å–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –∑–¥–æ—Ä–æ–≤—å–µ, –Ω–æ –∏ —è—Å–Ω–æ—Å—Ç—å —É–º–∞.",
    "üßò‚Äç‚ôÄÔ∏è –ú–µ–¥–∏—Ç–∞—Ü–∏—è –∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è —Å—Ç–∞–Ω—É—Ç –∫–ª—é—á–æ–º –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≥–∞—Ä–º–æ–Ω–∏–∏.",
    "üåø –ü—Ä–∏—Ä–æ–¥–∞ –ø–æ–¥–∞—Ä–∏—Ç –≤–∞–º –∏—Å—Ü–µ–ª–µ–Ω–∏–µ –∏ –Ω–æ–≤—ã–µ —Å–∏–ª—ã."
  ],
  general: [
    "‚ú® –í—Å–µ–ª–µ–Ω–Ω–∞—è –≥–æ—Ç–æ–≤–∏—Ç –¥–ª—è –≤–∞—Å –æ—Å–æ–±–µ–Ω–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑ - –±—É–¥—å—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã –∫ –ø–µ—Ä–µ–º–µ–Ω–∞–º.",
    "üåà –ü–æ—Å–ª–µ –ø–µ—Ä–∏–æ–¥–∞ —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–¥–æ—Å—Ç–∏ –∏ –∏–∑–æ–±–∏–ª–∏—è.",
    "üîÆ –í–∞—à–∞ –∏–Ω—Ç—É–∏—Ü–∏—è —Å–µ–π—á–∞—Å –æ—Å–æ–±–µ–Ω–Ω–æ —Å–∏–ª—å–Ω–∞ - –¥–æ–≤–µ—Ä—å—Ç–µ—Å—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É.",
    "üåü –ù–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –ø—Ä–∏–Ω–µ—Å—É—Ç –≤ –≤–∞—à—É –∂–∏–∑–Ω—å —Å–≤–µ–∂–∏–µ –∏–¥–µ–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
    "üé≠ –í—Ä–µ–º—è —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ–∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –º–∏—Ä—É."
  ]
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Fortune Teller AI
export default function FortuneTellerAI() {
  const [currentView, setCurrentView] = useState<'home' | 'tarot' | 'astrology' | 'runes' | 'crystal-ball' | 'profile'>('home');
  const [userProfile, setUserProfile] = useState<UserProfile>({
    favoriteCards: [],
    readingsCount: 0,
    fortunesCount: 0,
    level: 1,
    experience: 0,
    achievements: []
  });
  const [readings, setReadings] = useState<TarotReading[]>([]);
  const [fortunes, setFortunes] = useState<Fortune[]>([]);
  const [horoscopes, setHoroscopes] = useState<Horoscope[]>([]);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≥–∞–¥–∞–Ω–∏–π
  const [selectedCards, setSelectedCards] = useState<TarotCard[]>([]);
  const [currentReading, setCurrentReading] = useState<TarotReading | null>(null);
  const [isReadingActive, setIsReadingActive] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
  useEffect(() => {
    const savedProfile = localStorage.getItem('fortune-teller-profile');
    if (savedProfile) {
      const profile = JSON.parse(savedProfile);
      setUserProfile({
        ...profile,
        birthDate: profile.birthDate ? new Date(profile.birthDate) : undefined
      });
    }

    const savedReadings = localStorage.getItem('fortune-teller-readings');
    if (savedReadings) {
      setReadings(JSON.parse(savedReadings).map((r: any) => ({
        ...r,
        date: new Date(r.date)
      })));
    }

    const savedFortunes = localStorage.getItem('fortune-teller-fortunes');
    if (savedFortunes) {
      setFortunes(JSON.parse(savedFortunes).map((f: any) => ({
        ...f,
        date: new Date(f.date)
      })));
    }

    const savedHoroscopes = localStorage.getItem('fortune-teller-horoscopes');
    if (savedHoroscopes) {
      setHoroscopes(JSON.parse(savedHoroscopes).map((h: any) => ({
        ...h,
        date: new Date(h.date)
      })));
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
  useEffect(() => {
    localStorage.setItem('fortune-teller-profile', JSON.stringify(userProfile));
  }, [userProfile]);

  useEffect(() => {
    localStorage.setItem('fortune-teller-readings', JSON.stringify(readings));
  }, [readings]);

  useEffect(() => {
    localStorage.setItem('fortune-teller-fortunes', JSON.stringify(fortunes));
  }, [fortunes]);

  useEffect(() => {
    localStorage.setItem('fortune-teller-horoscopes', JSON.stringify(horoscopes));
  }, [horoscopes]);

  // –¢–∞—Å–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç
  const shuffleCards = useCallback(() => {
    return [...tarotCards].sort(() => Math.random() - 0.5);
  }, []);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ä—Ç
  const generateTarotInterpretation = useCallback((cards: {card: TarotCard, position: string, reversed: boolean}[]): string => {
    const interpretations = cards.map(({ card, position, reversed }) => {
      const meaning = reversed ? card.meaning.reversed : card.meaning.upright;
      return `${position}: ${card.nameRu} ${reversed ? '(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''} - ${meaning}`;
    });

    const overallMood = cards.some(c => c.card.keywords.includes('—Å–º–µ—Ä—Ç—å') || c.card.keywords.includes('–∫–æ–Ω–µ—Ü')) 
      ? 'challenging' 
      : cards.some(c => c.card.keywords.includes('—É—Å–ø–µ—Ö') || c.card.keywords.includes('—Ä–∞–¥–æ—Å—Ç—å'))
      ? 'positive'
      : 'neutral';

    let summary = "";
    if (overallMood === 'positive') {
      summary = "\n\n–û–±—â–∏–π –≤—ã–≤–æ–¥: –ó–≤–µ–∑–¥—ã –±–ª–∞–≥–æ–≤–æ–ª—è—Ç –≤–∞–º! –≠—Ç–æ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π –∏ –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.";
    } else if (overallMood === 'challenging') {
      summary = "\n\n–û–±—â–∏–π –≤—ã–≤–æ–¥: –°–µ–π—á–∞—Å –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞–±–æ—Ç—ã. –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã –∏ –≤–µ–¥—É—Ç –∫ —Ä–æ—Å—Ç—É.";
    } else {
      summary = "\n\n–û–±—â–∏–π –≤—ã–≤–æ–¥: –ë–∞–ª–∞–Ω—Å —Å–≤–µ—Ç–∞ –∏ —Ç–µ–Ω–∏. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ –±—É–¥—å—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã –∫ –ø–µ—Ä–µ–º–µ–Ω–∞–º.";
    }

    return interpretations.join('\n\n') + summary;
  }, []);

  // –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≥–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ
  const performTarotReading = useCallback((type: TarotReading['type'], question: string) => {
    const shuffled = shuffleCards();
    let cardCount = 1;
    let positions = ['–û—Ç–≤–µ—Ç'];

    if (type === 'three-card') {
      cardCount = 3;
      positions = ['–ü—Ä–æ—à–ª–æ–µ', '–ù–∞—Å—Ç–æ—è—â–µ–µ', '–ë—É–¥—É—â–µ–µ'];
    } else if (type === 'celtic-cross') {
      cardCount = 5; // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç
      positions = ['–°—É—Ç—å –≤–æ–ø—Ä–æ—Å–∞', '–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ', '–ü—Ä–æ—à–ª–æ–µ', '–ë—É–¥—É—â–µ–µ', '–°–æ–≤–µ—Ç'];
    }

    const readingCards = shuffled.slice(0, cardCount).map((card, index) => ({
      card,
      position: positions[index],
      reversed: Math.random() < 0.3 // 30% —à–∞–Ω—Å –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–π –∫–∞—Ä—Ç—ã
    }));

    const interpretation = generateTarotInterpretation(readingCards);
    const mood: TarotReading['mood'] = readingCards.some(c => 
      c.card.keywords.includes('—Ä–∞–¥–æ—Å—Ç—å') || c.card.keywords.includes('—É—Å–ø–µ—Ö')
    ) ? 'positive' : readingCards.some(c => 
      c.card.keywords.includes('—Å–º–µ—Ä—Ç—å') || c.reversed
    ) ? 'challenging' : 'neutral';

    const newReading: TarotReading = {
      id: `reading-${Date.now()}`,
      type,
      question,
      cards: readingCards,
      interpretation,
      date: new Date(),
      mood
    };

    setReadings(prev => [newReading, ...prev]);
    setCurrentReading(newReading);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    setUserProfile(prev => ({
      ...prev,
      readingsCount: prev.readingsCount + 1,
      experience: prev.experience + (type === 'single' ? 10 : type === 'three-card' ? 25 : 50)
    }));

    setIsReadingActive(false);
    return newReading;
  }, [shuffleCards, generateTarotInterpretation]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞
  const generateHoroscope = useCallback((signId: string, period: Horoscope['period']) => {
    const sign = zodiacSigns.find(s => s.id === signId);
    if (!sign) return null;

    const predictions = [
      `–≠–Ω–µ—Ä–≥–∏—è ${sign.planet} —É—Å–∏–ª–∏–≤–∞–µ—Ç –≤–∞—à–∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞. ${sign.traits.join(', ')} –ø—Ä–æ—è–≤—è—Ç—Å—è –æ—Å–æ–±–µ–Ω–Ω–æ —è—Ä–∫–æ.`,
      `–≠–ª–µ–º–µ–Ω—Ç ${sign.element === 'fire' ? '–æ–≥–Ω—è' : sign.element === 'water' ? '–≤–æ–¥—ã' : sign.element === 'air' ? '–≤–æ–∑–¥—É—Ö–∞' : '–∑–µ–º–ª–∏'} –¥–∞–µ—Ç –≤–∞–º —Å–∏–ª—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Å–≤–µ—Ä—à–µ–Ω–∏–π.`,
      `–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –∑–Ω–∞–∫–∞–º–∏ ${sign.compatibility.join(', ')} —Å–µ–π—á–∞—Å –æ—Å–æ–±–µ–Ω–Ω–æ –≤—ã—Å–æ–∫–∞.`,
      "–î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ - –æ–Ω–∞ –Ω–µ –ø–æ–¥–≤–µ–¥–µ—Ç –≤–∞—Å –≤ –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö."
    ];

    const randomPrediction = predictions[Math.floor(Math.random() * predictions.length)];
    const moods: Horoscope['mood'][] = ['excellent', 'good', 'neutral', 'challenging'];
    const colors = ['–∑–æ–ª–æ—Ç–æ–π', '—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π', '–∏–∑—É–º—Ä—É–¥–Ω—ã–π', '—Ä—É–±–∏–Ω–æ–≤—ã–π', '—Å–∞–ø—Ñ–∏—Ä–æ–≤—ã–π', '–∞–º–µ—Ç–∏—Å—Ç–æ–≤—ã–π'];
    
    const newHoroscope: Horoscope = {
      sign: sign.nameRu,
      period,
      prediction: randomPrediction,
      luckNumber: Math.floor(Math.random() * 99) + 1,
      luckColor: colors[Math.floor(Math.random() * colors.length)],
      advice: "–ë—É–¥—å—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã –∫ –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –∏ –¥–æ–≤–µ—Ä—è–π—Ç–µ —Å–≤–æ–µ–º—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É.",
      mood: moods[Math.floor(Math.random() * moods.length)],
      date: new Date()
    };

    setHoroscopes(prev => [newHoroscope, ...prev.filter(h => !(h.sign === sign.nameRu && h.period === period))]);
    return newHoroscope;
  }, []);

  // –ì–∞–¥–∞–Ω–∏–µ –Ω–∞ —Ä—É–Ω–∞—Ö
  const performRuneReading = useCallback(() => {
    const randomRune = runeStones[Math.floor(Math.random() * runeStones.length)];
    const advice = [
      "–≠—Ç–∞ —Ä—É–Ω–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –ø—É—Ç—å –∫ —Ä–µ—à–µ–Ω–∏—é –≤–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
      "–ü—Ä–∏–º–∏—Ç–µ —ç–Ω–µ—Ä–≥–∏—é —ç—Ç–æ–π —Ä—É–Ω—ã –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å.",
      "–†—É–Ω–∞ —Å–æ–≤–µ—Ç—É–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏.",
      "–î—Ä–µ–≤–Ω—è—è –º—É–¥—Ä–æ—Å—Ç—å –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ."
    ];

    const newFortune: Fortune = {
      id: `fortune-${Date.now()}`,
      type: 'rune',
      result: `${randomRune.symbol} ${randomRune.nameRu}: ${randomRune.meaning}`,
      advice: advice[Math.floor(Math.random() * advice.length)],
      date: new Date()
    };

    setFortunes(prev => [newFortune, ...prev]);
    setUserProfile(prev => ({
      ...prev,
      fortunesCount: prev.fortunesCount + 1,
      experience: prev.experience + 15
    }));

    return newFortune;
  }, []);

  // –ì–∞–¥–∞–Ω–∏–µ –Ω–∞ –º–∞–≥–∏—á–µ—Å–∫–æ–º —à–∞—Ä–µ
  const performCrystalBallReading = useCallback((question: string, category: 'love' | 'career' | 'health' | 'general') => {
    const predictions = fortunePredictions[category];
    const randomPrediction = predictions[Math.floor(Math.random() * predictions.length)];
    
    const advice = [
      "–í—Å–µ–ª–µ–Ω–Ω–∞—è —à–µ–ø—á–µ—Ç –≤–∞–º –æ—Ç–≤–µ—Ç - —Å–ª—É—à–∞–π—Ç–µ —Å–µ—Ä–¥—Ü–µ–º.",
      "–≠–Ω–µ—Ä–≥–∏–∏ –≤–æ–∫—Ä—É–≥ –≤–∞—Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
      "–í–∞—à–∏ –∞–Ω–≥–µ–ª—ã-—Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç –≤–∞—Å –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø—É—Ç–∏.",
      "–ú–∞–≥–∏—è –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–∫—Ä–æ–µ—Ç –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏."
    ];

    const newFortune: Fortune = {
      id: `fortune-${Date.now()}`,
      type: 'crystal-ball',
      question,
      result: randomPrediction,
      advice: advice[Math.floor(Math.random() * advice.length)],
      date: new Date()
    };

    setFortunes(prev => [newFortune, ...prev]);
    setUserProfile(prev => ({
      ...prev,
      fortunesCount: prev.fortunesCount + 1,
      experience: prev.experience + 20
    }));

    return newFortune;
  }, []);

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const HomePage = () => (
    <div className="space-y-8">
      {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ */}
      <div className="text-center bg-gradient-to-r from-purple-900 to-indigo-900 rounded-lg p-8 text-white">
        <div className="text-6xl mb-4">üîÆ</div>
        <h2 className="text-3xl font-bold mb-4">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –º–∞–≥–∏–∏</h2>
        <p className="text-lg opacity-90 max-w-2xl mx-auto">
          –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–π–Ω—ã —Å—É–¥—å–±—ã —Å –ø–æ–º–æ—â—å—é –¥—Ä–µ–≤–Ω–∏—Ö –∏—Å–∫—É—Å—Å—Ç–≤ –≥–∞–¥–∞–Ω–∏—è. 
          –ö–∞—Ä—Ç—ã –¢–∞—Ä–æ, –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è, —Ä—É–Ω—ã –∏ –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä —Ä–∞—Å–∫—Ä–æ—é—Ç –≤–∞–º —Å–µ–∫—Ä–µ—Ç—ã –±—É–¥—É—â–µ–≥–æ.
        </p>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      {userProfile.readingsCount > 0 && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-4 text-center">
            <div className="text-2xl font-bold text-purple-600">{userProfile.readingsCount}</div>
            <div className="text-sm text-slate-600 dark:text-slate-400">–ì–∞–¥–∞–Ω–∏–π</div>
          </div>
          <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-4 text-center">
            <div className="text-2xl font-bold text-indigo-600">{userProfile.fortunesCount}</div>
            <div className="text-sm text-slate-600 dark:text-slate-400">–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π</div>
          </div>
          <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-4 text-center">
            <div className="text-2xl font-bold text-violet-600">{userProfile.level}</div>
            <div className="text-sm text-slate-600 dark:text-slate-400">–£—Ä–æ–≤–µ–Ω—å</div>
          </div>
          <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-4 text-center">
            <div className="text-2xl font-bold text-pink-600">{userProfile.experience}</div>
            <div className="text-sm text-slate-600 dark:text-slate-400">–û–ø—ã—Ç</div>
          </div>
        </div>
      )}

      {/* –°–ø–æ—Å–æ–±—ã –≥–∞–¥–∞–Ω–∏—è */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div
          onClick={() => setCurrentView('tarot')}
          className="bg-white dark:bg-slate-800 rounded-lg shadow-md hover:shadow-lg transition-all duration-300 p-6 cursor-pointer group hover:scale-105"
        >
          <div className="text-center">
            <div className="text-4xl mb-3 group-hover:scale-110 transition-transform">üÉè</div>
            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-2">
              –ö–∞—Ä—Ç—ã –¢–∞—Ä–æ
            </h3>
            <p className="text-sm text-slate-600 dark:text-slate-400">
              –î—Ä–µ–≤–Ω–∏–µ –∫–∞—Ä—Ç—ã —Ä–∞—Å–∫—Ä–æ—é—Ç —Ç–∞–π–Ω—ã –≤–∞—à–µ–≥–æ –ø—Ä–æ—à–ª–æ–≥–æ, –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∏ –±—É–¥—É—â–µ–≥–æ
            </p>
          </div>
        </div>

        <div
          onClick={() => setCurrentView('astrology')}
          className="bg-white dark:bg-slate-800 rounded-lg shadow-md hover:shadow-lg transition-all duration-300 p-6 cursor-pointer group hover:scale-105"
        >
          <div className="text-center">
            <div className="text-4xl mb-3 group-hover:scale-110 transition-transform">‚≠ê</div>
            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-2">
              –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è
            </h3>
            <p className="text-sm text-slate-600 dark:text-slate-400">
              –ó–≤–µ–∑–¥—ã –∏ –ø–ª–∞–Ω–µ—Ç—ã —Ä–∞—Å—Å–∫–∞–∂—É—Ç –æ –≤–∞—à–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ –∏ —Å—É–¥—å–±–µ
            </p>
          </div>
        </div>

        <div
          onClick={() => setCurrentView('runes')}
          className="bg-white dark:bg-slate-800 rounded-lg shadow-md hover:shadow-lg transition-all duration-300 p-6 cursor-pointer group hover:scale-105"
        >
          <div className="text-center">
            <div className="text-4xl mb-3 group-hover:scale-110 transition-transform">·ö±</div>
            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-2">
              –†—É–Ω—ã
            </h3>
            <p className="text-sm text-slate-600 dark:text-slate-400">
              –î—Ä–µ–≤–Ω–∏–µ —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–∞–¥—É—Ç –º—É–¥—Ä—ã–µ —Å–æ–≤–µ—Ç—ã
            </p>
          </div>
        </div>

        <div
          onClick={() => setCurrentView('crystal-ball')}
          className="bg-white dark:bg-slate-800 rounded-lg shadow-md hover:shadow-lg transition-all duration-300 p-6 cursor-pointer group hover:scale-105"
        >
          <div className="text-center">
            <div className="text-4xl mb-3 group-hover:scale-110 transition-transform">üîÆ</div>
            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-2">
              –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä
            </h3>
            <p className="text-sm text-slate-600 dark:text-slate-400">
              –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π —à–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∂–µ—Ç –≤–∞—à–µ –±—É–¥—É—â–µ–µ
            </p>
          </div>
        </div>
      </div>

      {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–∞–¥–∞–Ω–∏—è */}
      {readings.length > 0 && (
        <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
          <h3 className="text-xl font-bold text-slate-900 dark:text-slate-100 mb-4">
            –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–∞–¥–∞–Ω–∏—è
          </h3>
          <div className="space-y-3">
            {readings.slice(0, 3).map(reading => (
              <div key={reading.id} className="flex items-center justify-between p-3 border border-slate-200 dark:border-slate-700 rounded-lg">
                <div>
                  <h4 className="font-medium text-slate-900 dark:text-slate-100">
                    {reading.question}
                  </h4>
                  <p className="text-sm text-slate-600 dark:text-slate-400">
                    {reading.date.toLocaleDateString()} ‚Ä¢ {reading.type === 'single' ? '–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞' : reading.type === 'three-card' ? '–¢—Ä–∏ –∫–∞—Ä—Ç—ã' : '–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç'}
                  </p>
                </div>
                <div className={`px-2 py-1 rounded text-xs ${
                  reading.mood === 'positive' ? 'bg-green-100 text-green-800' :
                  reading.mood === 'challenging' ? 'bg-red-100 text-red-800' :
                  'bg-blue-100 text-blue-800'
                }`}>
                  {reading.mood === 'positive' ? '‚ú® –ü–æ–∑–∏—Ç–∏–≤–Ω–æ' :
                   reading.mood === 'challenging' ? '‚ö†Ô∏è –í—ã–∑–æ–≤' : 'üåô –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ'}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ
  const TarotPage = () => {
    const [readingType, setReadingType] = useState<TarotReading['type']>('single');
    const [question, setQuestion] = useState('');
    const [showResult, setShowResult] = useState(false);

    const handleStartReading = () => {
      if (!question.trim()) return;
      
      setIsReadingActive(true);
      setTimeout(() => {
        const reading = performTarotReading(readingType, question);
        setCurrentReading(reading);
        setShowResult(true);
        setQuestion('');
      }, 2000); // –ò–º–∏—Ç–∞—Ü–∏—è —Ç–∞—Å–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç
    };

    const resetReading = () => {
      setShowResult(false);
      setCurrentReading(null);
      setIsReadingActive(false);
    };

    return (
      <div className="space-y-6">
        <div className="text-center bg-gradient-to-r from-purple-800 to-pink-800 rounded-lg p-6 text-white">
          <div className="text-5xl mb-3">üÉè</div>
          <h2 className="text-2xl font-bold mb-2">–ì–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ</h2>
          <p className="opacity-90">–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–∞—Ä—Ç–∞–º –∏ –ø–æ–ª—É—á–∏—Ç–µ –º—É–¥—Ä—ã–π –æ—Ç–≤–µ—Ç</p>
        </div>

        {!showResult ? (
          <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                  –¢–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞
                </label>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <button
                    onClick={() => setReadingType('single')}
                    className={`p-4 border rounded-lg text-center ${
                      readingType === 'single'
                        ? 'border-purple-500 bg-purple-50 dark:bg-purple-900/30'
                        : 'border-slate-300 dark:border-slate-600'
                    }`}
                  >
                    <div className="text-2xl mb-2">üÉè</div>
                    <div className="font-medium">–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞</div>
                    <div className="text-xs text-slate-600 dark:text-slate-400">–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç</div>
                  </button>
                  <button
                    onClick={() => setReadingType('three-card')}
                    className={`p-4 border rounded-lg text-center ${
                      readingType === 'three-card'
                        ? 'border-purple-500 bg-purple-50 dark:bg-purple-900/30'
                        : 'border-slate-300 dark:border-slate-600'
                    }`}
                  >
                    <div className="text-2xl mb-2">üÉèüÉèüÉè</div>
                    <div className="font-medium">–¢—Ä–∏ –∫–∞—Ä—Ç—ã</div>
                    <div className="text-xs text-slate-600 dark:text-slate-400">–ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ</div>
                  </button>
                  <button
                    onClick={() => setReadingType('celtic-cross')}
                    className={`p-4 border rounded-lg text-center ${
                      readingType === 'celtic-cross'
                        ? 'border-purple-500 bg-purple-50 dark:bg-purple-900/30'
                        : 'border-slate-300 dark:border-slate-600'
                    }`}
                  >
                    <div className="text-2xl mb-2">‚úö</div>
                    <div className="font-medium">–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç</div>
                    <div className="text-xs text-slate-600 dark:text-slate-400">–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑</div>
                  </button>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                  –í–∞—à –≤–æ–ø—Ä–æ—Å
                </label>
                <textarea
                  value={question}
                  onChange={(e) => setQuestion(e.target.value)}
                  placeholder="–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —á–µ—Ç–∫–æ –∏ —è—Å–Ω–æ..."
                  rows={3}
                  className="w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-purple-500 dark:bg-slate-700 dark:text-white resize-none"
                />
              </div>

              {isReadingActive ? (
                <div className="text-center py-8">
                  <div className="text-4xl mb-4 animate-bounce">üîÆ</div>
                  <p className="text-lg text-slate-600 dark:text-slate-400">–ö–∞—Ä—Ç—ã –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—é—Ç—Å—è...</p>
                  <p className="text-sm text-slate-500 mt-2">–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–≤–æ–µ–º –≤–æ–ø—Ä–æ—Å–µ</p>
                </div>
              ) : (
                <button
                  onClick={handleStartReading}
                  disabled={!question.trim()}
                  className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white py-3 px-6 rounded-lg font-medium disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  –ù–∞—á–∞—Ç—å –≥–∞–¥–∞–Ω–∏–µ
                </button>
              )}
            </div>
          </div>
        ) : currentReading && (
          <div className="space-y-6">
            <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
              <h3 className="text-xl font-bold text-slate-900 dark:text-slate-100 mb-4">
                –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–∞–¥–∞–Ω–∏—è
              </h3>
              <div className="mb-4">
                <p className="text-slate-600 dark:text-slate-400 mb-2">
                  <strong>–í–æ–ø—Ä–æ—Å:</strong> {currentReading.question}
                </p>
                <p className="text-slate-600 dark:text-slate-400">
                  <strong>–¢–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞:</strong> {
                    currentReading.type === 'single' ? '–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞' :
                    currentReading.type === 'three-card' ? '–¢—Ä–∏ –∫–∞—Ä—Ç—ã' :
                    '–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç'
                  }
                </p>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                {currentReading.cards.map((cardData, index) => (
                  <div key={index} className="text-center">
                    <div className={`text-6xl mb-2 ${cardData.reversed ? 'transform rotate-180' : ''}`}>
                      {cardData.card.image}
                    </div>
                    <h4 className="font-semibold text-slate-900 dark:text-slate-100">
                      {cardData.card.nameRu}
                    </h4>
                    <p className="text-sm text-slate-600 dark:text-slate-400 mb-1">
                      {cardData.position}
                    </p>
                    {cardData.reversed && (
                      <span className="text-xs bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200 px-2 py-1 rounded">
                        –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è
                      </span>
                    )}
                  </div>
                ))}
              </div>

              <div className="bg-slate-50 dark:bg-slate-700 rounded-lg p-4">
                <h4 className="font-semibold text-slate-900 dark:text-slate-100 mb-3">
                  –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ:
                </h4>
                <div className="text-slate-700 dark:text-slate-300 whitespace-pre-line">
                  {currentReading.interpretation}
                </div>
              </div>

              <div className="flex space-x-4 mt-6">
                <button
                  onClick={resetReading}
                  className="flex-1 bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-lg font-medium"
                >
                  –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ
                </button>
                <button
                  onClick={() => setCurrentView('home')}
                  className="flex-1 bg-slate-600 hover:bg-slate-700 text-white py-2 px-4 rounded-lg font-medium"
                >
                  –ù–∞ –≥–ª–∞–≤–Ω—É—é
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏
  const AstrologyPage = () => {
    const [selectedSign, setSelectedSign] = useState<string>('');
    const [selectedPeriod, setSelectedPeriod] = useState<Horoscope['period']>('daily');
    const [currentHoroscope, setCurrentHoroscope] = useState<Horoscope | null>(null);

    const handleGenerateHoroscope = () => {
      if (!selectedSign) return;
      const horoscope = generateHoroscope(selectedSign, selectedPeriod);
      setCurrentHoroscope(horoscope);
    };

    return (
      <div className="space-y-6">
        <div className="text-center bg-gradient-to-r from-indigo-800 to-purple-800 rounded-lg p-6 text-white">
          <div className="text-5xl mb-3">‚≠ê</div>
          <h2 className="text-2xl font-bold mb-2">–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è –∏ –≥–æ—Ä–æ—Å–∫–æ–ø—ã</h2>
          <p className="opacity-90">–£–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤–µ–∑–¥—ã –æ –≤–∞—à–µ–º –±—É–¥—É—â–µ–º</p>
        </div>

        <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
              </label>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                {zodiacSigns.map(sign => (
                  <button
                    key={sign.id}
                    onClick={() => setSelectedSign(sign.id)}
                    className={`p-3 border rounded-lg text-center ${
                      selectedSign === sign.id
                        ? 'border-purple-500 bg-purple-50 dark:bg-purple-900/30'
                        : 'border-slate-300 dark:border-slate-600'
                    }`}
                  >
                    <div className="text-2xl mb-1">{sign.symbol}</div>
                    <div className="font-medium text-sm">{sign.nameRu}</div>
                    <div className="text-xs text-slate-600 dark:text-slate-400">{sign.dates}</div>
                  </button>
                ))}
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                –ü–µ—Ä–∏–æ–¥
              </label>
              <div className="flex space-x-4">
                <button
                  onClick={() => setSelectedPeriod('daily')}
                  className={`px-4 py-2 rounded-lg ${
                    selectedPeriod === 'daily'
                      ? 'bg-purple-600 text-white'
                      : 'bg-slate-200 dark:bg-slate-700 text-slate-700 dark:text-slate-300'
                  }`}
                >
                  –ù–∞ —Å–µ–≥–æ–¥–Ω—è
                </button>
                <button
                  onClick={() => setSelectedPeriod('weekly')}
                  className={`px-4 py-2 rounded-lg ${
                    selectedPeriod === 'weekly'
                      ? 'bg-purple-600 text-white'
                      : 'bg-slate-200 dark:bg-slate-700 text-slate-700 dark:text-slate-300'
                  }`}
                >
                  –ù–∞ –Ω–µ–¥–µ–ª—é
                </button>
                <button
                  onClick={() => setSelectedPeriod('monthly')}
                  className={`px-4 py-2 rounded-lg ${
                    selectedPeriod === 'monthly'
                      ? 'bg-purple-600 text-white'
                      : 'bg-slate-200 dark:bg-slate-700 text-slate-700 dark:text-slate-300'
                  }`}
                >
                  –ù–∞ –º–µ—Å—è—Ü
                </button>
              </div>
            </div>

            <button
              onClick={handleGenerateHoroscope}
              disabled={!selectedSign}
              className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white py-3 px-6 rounded-lg font-medium disabled:opacity-50 disabled:cursor-not-allowed"
            >
              –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø
            </button>
          </div>
        </div>

        {currentHoroscope && (
          <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
            <h3 className="text-xl font-bold text-slate-900 dark:text-slate-100 mb-4">
              –ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {currentHoroscope.sign}
            </h3>
            
            <div className="space-y-4">
              <div className="bg-slate-50 dark:bg-slate-700 rounded-lg p-4">
                <h4 className="font-semibold text-slate-900 dark:text-slate-100 mb-2">
                  –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:
                </h4>
                <p className="text-slate-700 dark:text-slate-300">
                  {currentHoroscope.prediction}
                </p>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="text-center p-3 bg-amber-50 dark:bg-amber-900/20 rounded-lg">
                  <div className="text-2xl mb-1">üçÄ</div>
                  <div className="text-sm text-slate-600 dark:text-slate-400">–°—á–∞—Å—Ç–ª–∏–≤–æ–µ —á–∏—Å–ª–æ</div>
                  <div className="font-bold text-amber-700 dark:text-amber-300">{currentHoroscope.luckNumber}</div>
                </div>
                <div className="text-center p-3 bg-pink-50 dark:bg-pink-900/20 rounded-lg">
                  <div className="text-2xl mb-1">üé®</div>
                  <div className="text-sm text-slate-600 dark:text-slate-400">–¶–≤–µ—Ç —É–¥–∞—á–∏</div>
                  <div className="font-bold text-pink-700 dark:text-pink-300">{currentHoroscope.luckColor}</div>
                </div>
                <div className="text-center p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                  <div className="text-2xl mb-1">
                    {currentHoroscope.mood === 'excellent' ? 'üåü' : 
                     currentHoroscope.mood === 'good' ? 'üòä' : 
                     currentHoroscope.mood === 'neutral' ? 'üòê' : '‚ö†Ô∏è'}
                  </div>
                  <div className="text-sm text-slate-600 dark:text-slate-400">–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</div>
                  <div className="font-bold text-blue-700 dark:text-blue-300">
                    {currentHoroscope.mood === 'excellent' ? '–û—Ç–ª–∏—á–Ω–æ' : 
                     currentHoroscope.mood === 'good' ? '–•–æ—Ä–æ—à–æ' : 
                     currentHoroscope.mood === 'neutral' ? '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ' : '–û—Å—Ç–æ—Ä–æ–∂–Ω–æ'}
                  </div>
                </div>
              </div>

              <div className="bg-green-50 dark:bg-green-900/20 rounded-lg p-4">
                <h4 className="font-semibold text-green-800 dark:text-green-200 mb-2">
                  –°–æ–≤–µ—Ç –¥–Ω—è:
                </h4>
                <p className="text-green-700 dark:text-green-300">
                  {currentHoroscope.advice}
                </p>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–∞–¥–∞–Ω–∏—è –Ω–∞ —Ä—É–Ω–∞—Ö
  const RunesPage = () => {
    const [currentRune, setCurrentRune] = useState<Fortune | null>(null);
    const [isReading, setIsReading] = useState(false);

    const handleRuneReading = () => {
      setIsReading(true);
      setTimeout(() => {
        const fortune = performRuneReading();
        setCurrentRune(fortune);
        setIsReading(false);
      }, 1500);
    };

    return (
      <div className="space-y-6">
        <div className="text-center bg-gradient-to-r from-slate-800 to-blue-800 rounded-lg p-6 text-white">
          <div className="text-5xl mb-3">·ö±</div>
          <h2 className="text-2xl font-bold mb-2">–ì–∞–¥–∞–Ω–∏–µ –Ω–∞ —Ä—É–Ω–∞—Ö</h2>
          <p className="opacity-90">–î—Ä–µ–≤–Ω—è—è –º—É–¥—Ä–æ—Å—Ç—å –≤–∏–∫–∏–Ω–≥–æ–≤ –¥–∞—Å—Ç –≤–∞–º —Å–æ–≤–µ—Ç</p>
        </div>

        <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
          {!currentRune && !isReading ? (
            <div className="text-center space-y-6">
              <div className="grid grid-cols-2 md:grid-cols-5 gap-4 mb-6">
                {runeStones.map(rune => (
                  <div key={rune.id} className="text-center p-3 border border-slate-300 dark:border-slate-600 rounded-lg">
                    <div className="text-3xl mb-2">{rune.symbol}</div>
                    <div className="text-sm font-medium">{rune.nameRu}</div>
                  </div>
                ))}
              </div>
              
              <div>
                <p className="text-slate-600 dark:text-slate-400 mb-6">
                  –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–≤–æ–µ–º –≤–æ–ø—Ä–æ—Å–µ –∏ –ø–æ–∑–≤–æ–ª—å—Ç–µ —Ä—É–Ω–∞–º –≤—ã–±—Ä–∞—Ç—å –≤–∞—Å
                </p>
                <button
                  onClick={handleRuneReading}
                  className="bg-gradient-to-r from-slate-600 to-blue-600 hover:from-slate-700 hover:to-blue-700 text-white py-3 px-8 rounded-lg font-medium"
                >
                  –í—ã—Ç—è–Ω—É—Ç—å —Ä—É–Ω—É
                </button>
              </div>
            </div>
          ) : isReading ? (
            <div className="text-center py-8">
              <div className="text-4xl mb-4 animate-pulse">·ö±</div>
              <p className="text-lg text-slate-600 dark:text-slate-400">–†—É–Ω—ã –≤—ã–±–∏—Ä–∞—é—Ç...</p>
            </div>
          ) : currentRune && (
            <div className="space-y-6">
              <div className="text-center">
                <div className="text-6xl mb-4">
                  {runeStones.find(r => currentRune.result.includes(r.nameRu))?.symbol || '·ö±'}
                </div>
                <h3 className="text-xl font-bold text-slate-900 dark:text-slate-100 mb-2">
                  –í–∞—à–∞ —Ä—É–Ω–∞
                </h3>
              </div>

              <div className="bg-slate-50 dark:bg-slate-700 rounded-lg p-4">
                <h4 className="font-semibold text-slate-900 dark:text-slate-100 mb-2">
                  –ó–Ω–∞—á–µ–Ω–∏–µ:
                </h4>
                <p className="text-slate-700 dark:text-slate-300">
                  {currentRune.result}
                </p>
              </div>

              <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4">
                <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-2">
                  –°–æ–≤–µ—Ç:
                </h4>
                <p className="text-blue-700 dark:text-blue-300">
                  {currentRune.advice}
                </p>
              </div>

              <div className="flex space-x-4">
                <button
                  onClick={() => {
                    setCurrentRune(null);
                    setIsReading(false);
                  }}
                  className="flex-1 bg-slate-600 hover:bg-slate-700 text-white py-2 px-4 rounded-lg font-medium"
                >
                  –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ
                </button>
                <button
                  onClick={() => setCurrentView('home')}
                  className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg font-medium"
                >
                  –ù–∞ –≥–ª–∞–≤–Ω—É—é
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —à–∞—Ä–∞
  const CrystalBallPage = () => {
    const [question, setQuestion] = useState('');
    const [category, setCategory] = useState<'love' | 'career' | 'health' | 'general'>('general');
    const [currentFortune, setCurrentFortune] = useState<Fortune | null>(null);
    const [isReading, setIsReading] = useState(false);

    const handleCrystalBallReading = () => {
      if (!question.trim()) return;
      
      setIsReading(true);
      setTimeout(() => {
        const fortune = performCrystalBallReading(question, category);
        setCurrentFortune(fortune);
        setIsReading(false);
        setQuestion('');
      }, 2500);
    };

    return (
      <div className="space-y-6">
        <div className="text-center bg-gradient-to-r from-purple-800 to-pink-800 rounded-lg p-6 text-white">
          <div className="text-5xl mb-3">üîÆ</div>
          <h2 className="text-2xl font-bold mb-2">–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä</h2>
          <p className="opacity-90">–ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π —à–∞—Ä —Ä–∞—Å–∫—Ä–æ–µ—Ç —Ç–∞–π–Ω—ã –≤–∞—à–µ–≥–æ –±—É–¥—É—â–µ–≥–æ</p>
        </div>

        <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
          {!currentFortune && !isReading ? (
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                  –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞
                </label>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                  <button
                    onClick={() => setCategory('love')}
                    className={`p-3 border rounded-lg text-center ${
                      category === 'love'
                        ? 'border-pink-500 bg-pink-50 dark:bg-pink-900/30'
                        : 'border-slate-300 dark:border-slate-600'
                    }`}
                  >
                    <div className="text-2xl mb-1">üíï</div>
                    <div className="font-medium text-sm">–õ—é–±–æ–≤—å</div>
                  </button>
                  <button
                    onClick={() => setCategory('career')}
                    className={`p-3 border rounded-lg text-center ${
                      category === 'career'
                        ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/30'
                        : 'border-slate-300 dark:border-slate-600'
                    }`}
                  >
                    <div className="text-2xl mb-1">üíº</div>
                    <div className="font-medium text-sm">–ö–∞—Ä—å–µ—Ä–∞</div>
                  </button>
                  <button
                    onClick={() => setCategory('health')}
                    className={`p-3 border rounded-lg text-center ${
                      category === 'health'
                        ? 'border-green-500 bg-green-50 dark:bg-green-900/30'
                        : 'border-slate-300 dark:border-slate-600'
                    }`}
                  >
                    <div className="text-2xl mb-1">üå±</div>
                    <div className="font-medium text-sm">–ó–¥–æ—Ä–æ–≤—å–µ</div>
                  </button>
                  <button
                    onClick={() => setCategory('general')}
                    className={`p-3 border rounded-lg text-center ${
                      category === 'general'
                        ? 'border-purple-500 bg-purple-50 dark:bg-purple-900/30'
                        : 'border-slate-300 dark:border-slate-600'
                    }`}
                  >
                    <div className="text-2xl mb-1">‚ú®</div>
                    <div className="font-medium text-sm">–û–±—â–µ–µ</div>
                  </button>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                  –í–∞—à –≤–æ–ø—Ä–æ—Å
                </label>
                <textarea
                  value={question}
                  onChange={(e) => setQuestion(e.target.value)}
                  placeholder="–û —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —É –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —à–∞—Ä–∞?"
                  rows={3}
                  className="w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-purple-500 dark:bg-slate-700 dark:text-white resize-none"
                />
              </div>

              <button
                onClick={handleCrystalBallReading}
                disabled={!question.trim()}
                className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white py-3 px-6 rounded-lg font-medium disabled:opacity-50 disabled:cursor-not-allowed"
              >
                –ó–∞–≥–ª—è–Ω—É—Ç—å –≤ –±—É–¥—É—â–µ–µ
              </button>
            </div>
          ) : isReading ? (
            <div className="text-center py-8">
              <div className="text-6xl mb-4 animate-pulse">üîÆ</div>
              <p className="text-lg text-slate-600 dark:text-slate-400">–®–∞—Ä —Ç—É–º–∞–Ω–∏—Ç—Å—è...</p>
              <p className="text-sm text-slate-500 mt-2">–û–±—Ä–∞–∑—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —è—Å–Ω–µ–µ...</p>
            </div>
          ) : currentFortune && (
            <div className="space-y-6">
              <div className="text-center">
                <div className="text-6xl mb-4">üîÆ</div>
                <h3 className="text-xl font-bold text-slate-900 dark:text-slate-100 mb-2">
                  –í–∏–¥–µ–Ω–∏–µ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —à–∞—Ä–∞
                </h3>
                {currentFortune.question && (
                  <p className="text-slate-600 dark:text-slate-400 mb-4">
                    <strong>–í–∞—à –≤–æ–ø—Ä–æ—Å:</strong> {currentFortune.question}
                  </p>
                )}
              </div>

              <div className="bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-lg p-6">
                <h4 className="font-semibold text-purple-800 dark:text-purple-200 mb-3">
                  –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:
                </h4>
                <p className="text-purple-700 dark:text-purple-300 text-lg">
                  {currentFortune.result}
                </p>
              </div>

              <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4">
                <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-2">
                  –ú—É–¥—Ä—ã–π —Å–æ–≤–µ—Ç:
                </h4>
                <p className="text-blue-700 dark:text-blue-300">
                  {currentFortune.advice}
                </p>
              </div>

              <div className="flex space-x-4">
                <button
                  onClick={() => {
                    setCurrentFortune(null);
                    setIsReading(false);
                  }}
                  className="flex-1 bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-lg font-medium"
                >
                  –ù–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                </button>
                <button
                  onClick={() => setCurrentView('home')}
                  className="flex-1 bg-slate-600 hover:bg-slate-700 text-white py-2 px-4 rounded-lg font-medium"
                >
                  –ù–∞ –≥–ª–∞–≤–Ω—É—é
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ—Ñ–∏–ª—è
  const ProfilePage = () => {
    const [birthDate, setBirthDate] = useState(
      userProfile.birthDate ? userProfile.birthDate.toISOString().split('T')[0] : ''
    );

    const handleSaveBirthDate = () => {
      if (birthDate) {
        const date = new Date(birthDate);
        const month = date.getMonth() + 1;
        const day = date.getDate();
        
        let zodiacSign = '';
        if ((month === 3 && day >= 21) || (month === 4 && day <= 19)) zodiacSign = 'aries';
        else if ((month === 4 && day >= 20) || (month === 5 && day <= 20)) zodiacSign = 'taurus';
        else if ((month === 5 && day >= 21) || (month === 6 && day <= 20)) zodiacSign = 'gemini';
        else if ((month === 6 && day >= 21) || (month === 7 && day <= 22)) zodiacSign = 'cancer';
        else if ((month === 7 && day >= 23) || (month === 8 && day <= 22)) zodiacSign = 'leo';
        else if ((month === 8 && day >= 23) || (month === 9 && day <= 22)) zodiacSign = 'virgo';
        
        setUserProfile(prev => ({
          ...prev,
          birthDate: date,
          zodiacSign
        }));
      }
    };

    const userLevel = Math.floor(userProfile.experience / 100) + 1;
    const experienceToNextLevel = (userLevel * 100) - userProfile.experience;

    return (
      <div className="space-y-6">
        <div className="text-center bg-gradient-to-r from-indigo-800 to-purple-800 rounded-lg p-6 text-white">
          <div className="text-5xl mb-3">üë§</div>
          <h2 className="text-2xl font-bold mb-2">–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å</h2>
          <p className="opacity-90">–í–∞—à –ø—É—Ç—å –≤ –º–∏—Ä–µ –º–∞–≥–∏–∏ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π</p>
        </div>

        {/* –£—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç */}
        <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
          <h3 className="text-xl font-bold text-slate-900 dark:text-slate-100 mb-4">
            –£—Ä–æ–≤–µ–Ω—å –º–∏—Å—Ç–∏–∫–∞
          </h3>
          <div className="flex items-center justify-between mb-4">
            <div>
              <div className="text-3xl font-bold text-purple-600">–£—Ä–æ–≤–µ–Ω—å {userLevel}</div>
              <div className="text-sm text-slate-600 dark:text-slate-400">
                {experienceToNextLevel} –æ–ø—ã—Ç–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
              </div>
            </div>
            <div className="text-4xl">
              {userLevel >= 10 ? 'üîÆ' : userLevel >= 5 ? '‚≠ê' : 'üåü'}
            </div>
          </div>
          <div className="w-full bg-slate-200 dark:bg-slate-700 rounded-full h-3">
            <div 
              className="bg-gradient-to-r from-purple-600 to-pink-600 h-3 rounded-full transition-all duration-300"
              style={{ width: `${(userProfile.experience % 100)}%` }}
            ></div>
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4">
              –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–∞–¥–∞–Ω–∏–π
            </h3>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-slate-600 dark:text-slate-400">–ì–∞–¥–∞–Ω–∏–π –¢–∞—Ä–æ:</span>
                <span className="font-medium">{userProfile.readingsCount}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-slate-600 dark:text-slate-400">–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:</span>
                <span className="font-medium">{userProfile.fortunesCount}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-slate-600 dark:text-slate-400">–û–±—â–∏–π –æ–ø—ã—Ç:</span>
                <span className="font-medium">{userProfile.experience}</span>
              </div>
            </div>
          </div>

          <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4">
              –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
            </h3>
            <div className="space-y-3">
              <div>
                <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                  –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
                </label>
                <div className="flex space-x-2">
                  <input
                    type="date"
                    value={birthDate}
                    onChange={(e) => setBirthDate(e.target.value)}
                    className="flex-1 px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-purple-500 dark:bg-slate-700 dark:text-white"
                  />
                  <button
                    onClick={handleSaveBirthDate}
                    className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg"
                  >
                    üíæ
                  </button>
                </div>
              </div>
              {userProfile.zodiacSign && (
                <div className="flex justify-between">
                  <span className="text-slate-600 dark:text-slate-400">–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:</span>
                  <span className="font-medium">
                    {zodiacSigns.find(s => s.id === userProfile.zodiacSign)?.nameRu}
                  </span>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* –ò—Å—Ç–æ—Ä–∏—è –≥–∞–¥–∞–Ω–∏–π */}
        {readings.length > 0 && (
          <div className="bg-white dark:bg-slate-800 rounded-lg shadow-md p-6">
            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4">
              –ò—Å—Ç–æ—Ä–∏—è –≥–∞–¥–∞–Ω–∏–π
            </h3>
            <div className="space-y-3">
              {readings.slice(0, 5).map(reading => (
                <div key={reading.id} className="flex items-center justify-between p-3 border border-slate-200 dark:border-slate-700 rounded-lg">
                  <div>
                    <h4 className="font-medium text-slate-900 dark:text-slate-100">
                      {reading.question}
                    </h4>
                    <p className="text-sm text-slate-600 dark:text-slate-400">
                      {reading.date.toLocaleDateString()} ‚Ä¢ {reading.type === 'single' ? '–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞' : reading.type === 'three-card' ? '–¢—Ä–∏ –∫–∞—Ä—Ç—ã' : '–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç'}
                    </p>
                  </div>
                  <div className={`px-2 py-1 rounded text-xs ${
                    reading.mood === 'positive' ? 'bg-green-100 text-green-800' :
                    reading.mood === 'challenging' ? 'bg-red-100 text-red-800' :
                    'bg-blue-100 text-blue-800'
                  }`}>
                    {reading.mood === 'positive' ? '‚ú®' :
                     reading.mood === 'challenging' ? '‚ö†Ô∏è' : 'üåô'}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-slate-900 to-indigo-900">
      <div className="container mx-auto px-4 py-8 max-w-6xl">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-4xl font-bold text-white mb-2">
              üîÆ Fortune Teller AI
            </h1>
            <p className="text-lg text-purple-200">
              –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –º–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            </p>
          </div>
          
          <Link 
            href="/"
            className="bg-white/10 backdrop-blur-sm text-white px-6 py-2 rounded-lg font-medium hover:bg-white/20 transition-colors border border-white/20"
          >
            ‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é
          </Link>
        </div>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="bg-white/10 backdrop-blur-sm rounded-lg shadow-lg p-4 mb-8 border border-white/20">
          <div className="flex flex-wrap gap-2">
            <button
              onClick={() => setCurrentView('home')}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                currentView === 'home'
                  ? 'bg-purple-600 text-white'
                  : 'bg-white/10 text-purple-200 hover:bg-white/20'
              }`}
            >
              üè† –ì–ª–∞–≤–Ω–∞—è
            </button>
            <button
              onClick={() => setCurrentView('tarot')}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                currentView === 'tarot'
                  ? 'bg-purple-600 text-white'
                  : 'bg-white/10 text-purple-200 hover:bg-white/20'
              }`}
            >
              üÉè –¢–∞—Ä–æ
            </button>
            <button
              onClick={() => setCurrentView('astrology')}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                currentView === 'astrology'
                  ? 'bg-purple-600 text-white'
                  : 'bg-white/10 text-purple-200 hover:bg-white/20'
              }`}
            >
              ‚≠ê –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è
            </button>
            <button
              onClick={() => setCurrentView('runes')}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                currentView === 'runes'
                  ? 'bg-purple-600 text-white'
                  : 'bg-white/10 text-purple-200 hover:bg-white/20'
              }`}
            >
              ·ö± –†—É–Ω—ã
            </button>
            <button
              onClick={() => setCurrentView('crystal-ball')}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                currentView === 'crystal-ball'
                  ? 'bg-purple-600 text-white'
                  : 'bg-white/10 text-purple-200 hover:bg-white/20'
              }`}
            >
              üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä
            </button>
            <button
              onClick={() => setCurrentView('profile')}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                currentView === 'profile'
                  ? 'bg-purple-600 text-white'
                  : 'bg-white/10 text-purple-200 hover:bg-white/20'
              }`}
            >
              üë§ –ü—Ä–æ—Ñ–∏–ª—å
            </button>
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        {currentView === 'home' && <HomePage />}
        {currentView === 'tarot' && <TarotPage />}
        {currentView === 'astrology' && <AstrologyPage />}
        {currentView === 'runes' && <RunesPage />}
        {currentView === 'crystal-ball' && <CrystalBallPage />}
        {currentView === 'profile' && <ProfilePage />}

        {/* Footer */}
        <footer className="mt-12 text-center">
          <p className="text-purple-300 text-sm">
            ‚ú® –î–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Å –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –ª—é–±–æ–≤—å—é ‚ú®
          </p>
        </footer>
      </div>
    </div>
  );
}
