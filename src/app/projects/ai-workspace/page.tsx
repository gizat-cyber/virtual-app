"use client";

import { useState, useEffect, useRef, useCallback } from "react";
import Link from "next/link";

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface Document {
  id: string;
  title: string;
  content: string;
  tags: string[];
  type: "note" | "task" | "project" | "idea";
  priority: "low" | "medium" | "high" | "urgent";
  createdAt: Date;
  updatedAt: Date;
  aiSummary?: string;
  linkedDocuments: string[];
}

interface Task {
  id: string;
  title: string;
  description: string;
  status: "todo" | "in-progress" | "review" | "done";
  priority: "low" | "medium" | "high" | "urgent";
  assignee?: string;
  dueDate?: string;
  tags: string[];
  estimatedTime?: number;
  actualTime?: number;
  createdAt: Date;
  aiInsights?: string[];
}

interface AIMessage {
  id: string;
  type: "user" | "ai";
  content: string;
  timestamp: Date;
  context?: string;
}

interface VoiceNote {
  id: string;
  title: string;
  duration: number;
  transcript: string;
  createdAt: Date;
  tags: string[];
}

// –°–∏–º—É–ª—è—Ü–∏—è AI –æ—Ç–≤–µ—Ç–æ–≤
const aiResponses = {
  productivity: [
    "–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ 3 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö —Å–µ–≥–æ–¥–Ω—è.",
    "–í–∞—à–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–≤—ã—Å–∏–ª–∞—Å—å –Ω–∞ 23% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!",
    "–û–±–Ω–∞—Ä—É–∂–∏–ª –ø–∞—Ç—Ç–µ—Ä–Ω: –∑–∞–¥–∞—á–∏ –ø–æ –¥–∏–∑–∞–π–Ω—É –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–Ω—è."
  ],
  suggestions: [
    "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á —Ç–∏–ø–∞ '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç'.",
    "–ó–∞–º–µ—Ç–∏–ª, —á—Ç–æ —É –≤–∞—Å –º–Ω–æ–≥–æ –∑–∞–¥–∞—á —Å —Ç–µ–≥–æ–º 'urgent'. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.",
    "–†–µ–∫–æ–º–µ–Ω–¥—É—é —Ä–∞–∑–±–∏—Ç—å –∑–∞–¥–∞—á—É '–ë–æ–ª—å—à–æ–π –ø—Ä–æ–µ–∫—Ç' –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏."
  ],
  insights: [
    "–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤–∞—à–µ –ø–∏–∫–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - 10:00-12:00.",
    "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ 87% –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å!",
    "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –∑–∞–¥–∞—á–∏ —Å –æ—Ü–µ–Ω–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–∞ 34% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ."
  ]
};

export default function AIWorkspace() {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [documents, setDocuments] = useState<Document[]>([]);
  const [tasks, setTasks] = useState<Task[]>([]);
  const [aiMessages, setAiMessages] = useState<AIMessage[]>([]);
  const [voiceNotes, setVoiceNotes] = useState<VoiceNote[]>([]);
  
  const [activeView, setActiveView] = useState<"dashboard" | "documents" | "tasks" | "ai-chat" | "voice" | "analytics">("dashboard");
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedTags, setSelectedTags] = useState<string[]>([]);
  
  // AI Chat
  const [aiInput, setAiInput] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  
  // Drag & Drop –¥–ª—è Kanban
  const [draggedTask, setDraggedTask] = useState<string | null>(null);
  
  // Voice recording
  const [isRecording, setIsRecording] = useState(false);
  const [recordingTime, setRecordingTime] = useState(0);
  const recordingInterval = useRef<NodeJS.Timeout | null>(null);
  
  // –§–æ—Ä–º—ã
  const [showDocumentForm, setShowDocumentForm] = useState(false);
  const [showTaskForm, setShowTaskForm] = useState(false);
  const [documentForm, setDocumentForm] = useState({
    title: "",
    content: "",
    type: "note" as Document["type"],
    priority: "medium" as Document["priority"],
    tags: ""
  });
  const [taskForm, setTaskForm] = useState({
    title: "",
    description: "",
    priority: "medium" as Task["priority"],
    dueDate: "",
    estimatedTime: "",
    tags: ""
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const savedDocs = localStorage.getItem("ai-workspace-documents");
    const savedTasks = localStorage.getItem("ai-workspace-tasks");
    const savedMessages = localStorage.getItem("ai-workspace-messages");
    const savedVoiceNotes = localStorage.getItem("ai-workspace-voice");
    
    if (savedDocs) setDocuments(JSON.parse(savedDocs));
    if (savedTasks) setTasks(JSON.parse(savedTasks));
    if (savedMessages) setAiMessages(JSON.parse(savedMessages));
    if (savedVoiceNotes) setVoiceNotes(JSON.parse(savedVoiceNotes));
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AI
    if (!savedMessages) {
      const welcomeMessage: AIMessage = {
        id: "welcome",
        type: "ai",
        content: "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π —Ä–∞–±–æ—Ç—ã, –∞–Ω–∞–ª–∏–∑–æ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —É–º–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?",
        timestamp: new Date(),
        context: "welcome"
      };
      setAiMessages([welcomeMessage]);
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    localStorage.setItem("ai-workspace-documents", JSON.stringify(documents));
  }, [documents]);

  useEffect(() => {
    localStorage.setItem("ai-workspace-tasks", JSON.stringify(tasks));
  }, [tasks]);

  useEffect(() => {
    localStorage.setItem("ai-workspace-messages", JSON.stringify(aiMessages));
  }, [aiMessages]);

  useEffect(() => {
    localStorage.setItem("ai-workspace-voice", JSON.stringify(voiceNotes));
  }, [voiceNotes]);

  // AI —Ñ—É–Ω–∫—Ü–∏–∏
  const generateAIResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase();
    
    if (message.includes("–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å") || message.includes("—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")) {
      return aiResponses.productivity[Math.floor(Math.random() * aiResponses.productivity.length)];
    } else if (message.includes("—Å–æ–≤–µ—Ç") || message.includes("—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è")) {
      return aiResponses.suggestions[Math.floor(Math.random() * aiResponses.suggestions.length)];
    } else if (message.includes("–∞–Ω–∞–ª–∏–∑") || message.includes("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")) {
      return aiResponses.insights[Math.floor(Math.random() * aiResponses.insights.length)];
    } else if (message.includes("–∑–∞–¥–∞—á")) {
      const todoCount = tasks.filter(t => t.status === "todo").length;
      const inProgressCount = tasks.filter(t => t.status === "in-progress").length;
      return `–£ –≤–∞—Å ${todoCount} –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –∏ ${inProgressCount} –≤ —Ä–∞–±–æ—Ç–µ. –†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å –∑–∞–¥–∞—á –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.`;
    } else if (message.includes("–¥–æ–∫—É–º–µ–Ω—Ç")) {
      const recentDocs = documents.filter(d => {
        const dayAgo = new Date();
        dayAgo.setDate(dayAgo.getDate() - 1);
        return new Date(d.updatedAt) > dayAgo;
      }).length;
      return `–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –≤—ã –æ–±–Ω–æ–≤–∏–ª–∏ ${recentDocs} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –û—Ç–ª–∏—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!`;
    }
    
    return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ú–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –∑–∞–¥–∞—á–∏, –¥–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø–æ–º–æ—á—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –û —á–µ–º —Ö–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?";
  };

  const sendAIMessage = async () => {
    if (!aiInput.trim()) return;

    const userMessage: AIMessage = {
      id: Date.now().toString(),
      type: "user",
      content: aiInput,
      timestamp: new Date()
    };

    setAiMessages(prev => [...prev, userMessage]);
    setAiInput("");
    setIsTyping(true);

    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ AI
    setTimeout(() => {
      const aiResponse: AIMessage = {
        id: (Date.now() + 1).toString(),
        type: "ai",
        content: generateAIResponse(aiInput),
        timestamp: new Date(),
        context: "response"
      };
      
      setAiMessages(prev => [...prev, aiResponse]);
      setIsTyping(false);
    }, 1500 + Math.random() * 1000);
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  const addDocument = () => {
    if (!documentForm.title.trim()) return;

    const newDoc: Document = {
      id: Date.now().toString(),
      title: documentForm.title,
      content: documentForm.content,
      type: documentForm.type,
      priority: documentForm.priority,
      tags: documentForm.tags.split(",").map(t => t.trim()).filter(t => t),
      createdAt: new Date(),
      updatedAt: new Date(),
      linkedDocuments: [],
      aiSummary: documentForm.content.length > 100 
        ? `–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç ${documentForm.content.split(" ").length} —Å–ª–æ–≤. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã: ${documentForm.tags}.`
        : undefined
    };

    setDocuments(prev => [newDoc, ...prev]);
    setDocumentForm({
      title: "",
      content: "",
      type: "note",
      priority: "medium",
      tags: ""
    });
    setShowDocumentForm(false);
  };

  // –§—É–Ω–∫—Ü–∏–∏ –∑–∞–¥–∞—á
  const addTask = () => {
    if (!taskForm.title.trim()) return;

    const newTask: Task = {
      id: Date.now().toString(),
      title: taskForm.title,
      description: taskForm.description,
      status: "todo",
      priority: taskForm.priority,
      dueDate: taskForm.dueDate,
      estimatedTime: taskForm.estimatedTime ? parseInt(taskForm.estimatedTime) : undefined,
      tags: taskForm.tags.split(",").map(t => t.trim()).filter(t => t),
      createdAt: new Date(),
      aiInsights: ["–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±—ç–∫–ª–æ–≥", "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω"]
    };

    setTasks(prev => [newTask, ...prev]);
    setTaskForm({
      title: "",
      description: "",
      priority: "medium",
      dueDate: "",
      estimatedTime: "",
      tags: ""
    });
    setShowTaskForm(false);
  };

  const updateTaskStatus = (taskId: string, newStatus: Task["status"]) => {
    setTasks(prev => prev.map(task => 
      task.id === taskId 
        ? { ...task, status: newStatus, updatedAt: new Date() }
        : task
    ));
  };

  // Voice Recording
  const startRecording = async () => {
    setIsRecording(true);
    setRecordingTime(0);
    
    recordingInterval.current = setInterval(() => {
      setRecordingTime(prev => prev + 1);
    }, 1000);

    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏
    setTimeout(() => {
      stopRecording();
    }, 5000 + Math.random() * 10000);
  };

  const stopRecording = () => {
    setIsRecording(false);
    if (recordingInterval.current) {
      clearInterval(recordingInterval.current);
      recordingInterval.current = null;
    }

    // –ò–º–∏—Ç–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    const mockTranscripts = [
      "–ù—É–∂–Ω–æ –Ω–µ –∑–∞–±—ã—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∫ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –≤—Å—Ç—Ä–µ—á–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
      "–ò–¥–µ—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞: —Å–æ–∑–¥–∞—Ç—å –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏",
      "–û–±—Å—É–¥–∏—Ç—å —Å –∫–æ–º–∞–Ω–¥–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ –ø—Ä–æ–µ–∫—Ç"
    ];

    const newVoiceNote: VoiceNote = {
      id: Date.now().toString(),
      title: `–ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ ${new Date().toLocaleTimeString()}`,
      duration: recordingTime,
      transcript: mockTranscripts[Math.floor(Math.random() * mockTranscripts.length)],
      createdAt: new Date(),
      tags: ["voice", "auto-generated"]
    };

    setVoiceNotes(prev => [newVoiceNote, ...prev]);
    setRecordingTime(0);
  };

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const getStats = () => {
    const totalTasks = tasks.length;
    const completedTasks = tasks.filter(t => t.status === "done").length;
    const totalDocs = documents.length;
    const todayDocs = documents.filter(d => {
      const today = new Date().toDateString();
      return new Date(d.createdAt).toDateString() === today;
    }).length;

    const completionRate = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;
    
    return {
      totalTasks,
      completedTasks,
      totalDocs,
      todayDocs,
      completionRate,
      voiceNotesCount: voiceNotes.length
    };
  };

  const stats = getStats();

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
  const filteredDocuments = documents.filter(doc => {
    const matchesSearch = doc.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         doc.content.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesTags = selectedTags.length === 0 || 
                       selectedTags.some(tag => doc.tags.includes(tag));
    return matchesSearch && matchesTags;
  });

  const filteredTasks = tasks.filter(task => {
    const matchesSearch = task.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         task.description.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesTags = selectedTags.length === 0 || 
                       selectedTags.some(tag => task.tags.includes(tag));
    return matchesSearch && matchesTags;
  });

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "urgent": return "bg-red-500";
      case "high": return "bg-orange-500";
      case "medium": return "bg-yellow-500";
      case "low": return "bg-green-500";
      default: return "bg-gray-500";
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "todo": return "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200";
      case "in-progress": return "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200";
      case "review": return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200";
      case "done": return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200";
      default: return "bg-gray-100 text-gray-800";
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-purple-50 to-pink-50 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900">
      <div className="container mx-auto px-4 py-6 max-w-7xl">
        {/* Header */}
        <header className="mb-8">
          <Link 
            href="/"
            className="inline-flex items-center text-sm text-slate-600 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200 mb-4"
          >
            ‚Üê –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º
          </Link>
          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between">
            <div>
              <h1 className="text-4xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent mb-2">
                ü§ñ AI-Powered Workspace
              </h1>
              <p className="text-slate-600 dark:text-slate-400">
                –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏, –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
              </p>
            </div>
            
            {/* Quick Actions */}
            <div className="mt-4 lg:mt-0 flex flex-wrap gap-2">
              <button
                onClick={() => setShowDocumentForm(true)}
                className="bg-indigo-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-indigo-700 transition-colors duration-200 text-sm"
              >
                üìù –î–æ–∫—É–º–µ–Ω—Ç
              </button>
              <button
                onClick={() => setShowTaskForm(true)}
                className="bg-purple-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-purple-700 transition-colors duration-200 text-sm"
              >
                ‚úÖ –ó–∞–¥–∞—á–∞
              </button>
              <button
                onClick={isRecording ? stopRecording : startRecording}
                className={`px-4 py-2 rounded-lg font-medium transition-colors duration-200 text-sm ${
                  isRecording 
                    ? "bg-red-600 text-white hover:bg-red-700 animate-pulse" 
                    : "bg-green-600 text-white hover:bg-green-700"
                }`}
              >
                {isRecording ? `üî¥ ${formatTime(recordingTime)}` : "üéôÔ∏è –ì–æ–ª–æ—Å"}
              </button>
            </div>
          </div>
        </header>

        {/* Features Overview */}
        <div className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md rounded-xl p-6 mb-6 border border-white/20 dark:border-slate-700">
          <h3 className="font-semibold text-slate-900 dark:text-slate-100 mb-3">üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</h3>
          <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4 text-sm text-slate-600 dark:text-slate-400">
            <div className="flex items-center space-x-2">
              <span>ü§ñ</span>
              <span>AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</span>
            </div>
            <div className="flex items-center space-x-2">
              <span>üìä</span>
              <span>–£–º–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</span>
            </div>
            <div className="flex items-center space-x-2">
              <span>üéôÔ∏è</span>
              <span>–ì–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏</span>
            </div>
            <div className="flex items-center space-x-2">
              <span>üìã</span>
              <span>Kanban –¥–æ—Å–∫–∞</span>
            </div>
            <div className="flex items-center space-x-2">
              <span>üîç</span>
              <span>–£–º–Ω—ã–π –ø–æ–∏—Å–∫</span>
            </div>
            <div className="flex items-center space-x-2">
              <span>‚ö°</span>
              <span>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</span>
            </div>
          </div>
        </div>

        {/* Navigation */}
        <div className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md rounded-xl mb-6 border border-white/20 dark:border-slate-700">
          <div className="flex overflow-x-auto">
            {[
              { id: "dashboard", label: "üìä –î–∞—à–±–æ—Ä–¥", icon: "üìä" },
              { id: "tasks", label: "‚úÖ –ó–∞–¥–∞—á–∏", icon: "‚úÖ" },
              { id: "documents", label: "üìù –î–æ–∫—É–º–µ–Ω—Ç—ã", icon: "üìù" },
              { id: "ai-chat", label: "ü§ñ AI –ß–∞—Ç", icon: "ü§ñ" },
              { id: "voice", label: "üéôÔ∏è –ì–æ–ª–æ—Å", icon: "üéôÔ∏è" },
              { id: "analytics", label: "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", icon: "üìà" }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveView(tab.id as any)}
                className={`px-6 py-4 text-sm font-medium whitespace-nowrap border-b-2 transition-all duration-200 ${
                  activeView === tab.id
                    ? "border-indigo-500 text-indigo-600 dark:text-indigo-400 bg-white/50 dark:bg-slate-700/50"
                    : "border-transparent text-slate-600 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200 hover:bg-white/30 dark:hover:bg-slate-700/30"
                }`}
              >
                {tab.label}
              </button>
            ))}
          </div>
        </div>

        {/* Tasks View - Kanban Board */}
        {activeView === "tasks" && (
          <div className="space-y-6">
            {/* Search and Filters */}
            <div className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md rounded-xl p-4 border border-white/20 dark:border-slate-700">
              <div className="flex flex-col md:flex-row gap-4">
                <input
                  type="text"
                  placeholder="–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="flex-1 px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 dark:bg-slate-700 dark:text-slate-100"
                />
                <div className="flex gap-2">
                  {["urgent", "high", "medium", "low"].map(priority => (
                    <button
                      key={priority}
                      onClick={() => {
                        if (selectedTags.includes(priority)) {
                          setSelectedTags(selectedTags.filter(t => t !== priority));
                        } else {
                          setSelectedTags([...selectedTags, priority]);
                        }
                      }}
                      className={`px-3 py-1 text-xs rounded-full transition-colors ${
                        selectedTags.includes(priority)
                          ? `${getPriorityColor(priority)} text-white`
                          : "bg-slate-200 dark:bg-slate-600 text-slate-700 dark:text-slate-300"
                      }`}
                    >
                      {priority}
                    </button>
                  ))}
                </div>
              </div>
            </div>

            {/* Kanban Board */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {[
                { status: "todo", title: "–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é", icon: "üìã", color: "bg-slate-100 dark:bg-slate-700" },
                { status: "in-progress", title: "–í —Ä–∞–±–æ—Ç–µ", icon: "üîÑ", color: "bg-blue-100 dark:bg-blue-900/30" },
                { status: "review", title: "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", icon: "üëÄ", color: "bg-yellow-100 dark:bg-yellow-900/30" },
                { status: "done", title: "–ì–æ—Ç–æ–≤–æ", icon: "‚úÖ", color: "bg-green-100 dark:bg-green-900/30" }
              ].map((column) => (
                <div
                  key={column.status}
                  className={`${column.color} rounded-xl p-4 border border-white/20 dark:border-slate-600`}
                  onDragOver={(e) => e.preventDefault()}
                  onDrop={(e) => {
                    e.preventDefault();
                    if (draggedTask) {
                      updateTaskStatus(draggedTask, column.status as Task["status"]);
                      setDraggedTask(null);
                    }
                  }}
                >
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="font-semibold text-slate-900 dark:text-slate-100 flex items-center space-x-2">
                      <span>{column.icon}</span>
                      <span>{column.title}</span>
                    </h3>
                    <span className="bg-white dark:bg-slate-700 text-slate-600 dark:text-slate-300 px-2 py-1 rounded-full text-xs">
                      {filteredTasks.filter(t => t.status === column.status).length}
                    </span>
                  </div>

                  <div className="space-y-3">
                    {filteredTasks
                      .filter(task => task.status === column.status)
                      .map((task) => (
                        <div
                          key={task.id}
                          draggable
                          onDragStart={() => setDraggedTask(task.id)}
                          className="bg-white dark:bg-slate-800 p-4 rounded-lg shadow-sm hover:shadow-md transition-all duration-200 cursor-move border border-slate-200 dark:border-slate-700"
                        >
                          <div className="flex items-start justify-between mb-2">
                            <h4 className="font-medium text-slate-900 dark:text-slate-100 text-sm">
                              {task.title}
                            </h4>
                            <div className={`w-3 h-3 rounded-full ${getPriorityColor(task.priority)}`}></div>
                          </div>
                          
                          {task.description && (
                            <p className="text-xs text-slate-600 dark:text-slate-400 mb-3 line-clamp-2">
                              {task.description}
                            </p>
                          )}

                          <div className="flex items-center justify-between text-xs text-slate-500 dark:text-slate-400">
                            <div className="flex items-center space-x-2">
                              {task.dueDate && (
                                <span className="flex items-center space-x-1">
                                  <span>üìÖ</span>
                                  <span>{new Date(task.dueDate).toLocaleDateString('ru-RU')}</span>
                                </span>
                              )}
                              {task.estimatedTime && (
                                <span className="flex items-center space-x-1">
                                  <span>‚è±Ô∏è</span>
                                  <span>{task.estimatedTime}—á</span>
                                </span>
                              )}
                            </div>
                            <div className="flex space-x-1">
                              {task.tags.slice(0, 2).map(tag => (
                                <span key={tag} className="bg-slate-100 dark:bg-slate-600 px-1 py-0.5 rounded text-xs">
                                  {tag}
                                </span>
                              ))}
                            </div>
                          </div>

                          {task.aiInsights && task.aiInsights.length > 0 && (
                            <div className="mt-2 p-2 bg-indigo-50 dark:bg-indigo-900/20 rounded text-xs">
                              <span className="text-indigo-600 dark:text-indigo-400">ü§ñ {task.aiInsights[0]}</span>
                            </div>
                          )}
                        </div>
                      ))}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Documents View */}
        {activeView === "documents" && (
          <div className="space-y-6">
            {/* Search and Filters */}
            <div className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md rounded-xl p-4 border border-white/20 dark:border-slate-700">
              <div className="flex flex-col md:flex-row gap-4">
                <input
                  type="text"
                  placeholder="–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="flex-1 px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-slate-700 dark:text-slate-100"
                />
                <div className="flex gap-2">
                  {["note", "task", "project", "idea"].map(type => (
                    <button
                      key={type}
                      onClick={() => {
                        if (selectedTags.includes(type)) {
                          setSelectedTags(selectedTags.filter(t => t !== type));
                        } else {
                          setSelectedTags([...selectedTags, type]);
                        }
                      }}
                      className={`px-3 py-1 text-xs rounded-full transition-colors ${
                        selectedTags.includes(type)
                          ? "bg-indigo-500 text-white"
                          : "bg-slate-200 dark:bg-slate-600 text-slate-700 dark:text-slate-300"
                      }`}
                    >
                      {type === "note" ? "üìù" : type === "task" ? "‚úÖ" : type === "project" ? "üöÄ" : "üí°"} {type}
                    </button>
                  ))}
                </div>
              </div>
            </div>

            {/* Documents Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredDocuments.map((doc) => (
                <div
                  key={doc.id}
                  className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md rounded-xl p-6 border border-white/20 dark:border-slate-700 hover:shadow-lg transition-all duration-200"
                >
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center space-x-2">
                      <span className="text-lg">
                        {doc.type === "note" ? "üìù" : doc.type === "task" ? "‚úÖ" : doc.type === "project" ? "üöÄ" : "üí°"}
                      </span>
                      <h3 className="font-semibold text-slate-900 dark:text-slate-100">
                        {doc.title}
                      </h3>
                    </div>
                    <div className={`w-3 h-3 rounded-full ${getPriorityColor(doc.priority)}`}></div>
                  </div>

                  <p className="text-sm text-slate-600 dark:text-slate-400 mb-4 line-clamp-3">
                    {doc.content}
                  </p>

                  {doc.aiSummary && (
                    <div className="mb-4 p-3 bg-gradient-to-r from-indigo-50 to-purple-50 dark:from-indigo-900/20 dark:to-purple-900/20 rounded-lg">
                      <p className="text-xs text-indigo-700 dark:text-indigo-300">
                        ü§ñ AI: {doc.aiSummary}
                      </p>
                    </div>
                  )}

                  <div className="flex items-center justify-between text-xs text-slate-500 dark:text-slate-400">
                    <span>{new Date(doc.updatedAt).toLocaleDateString('ru-RU')}</span>
                    <div className="flex space-x-1">
                      {doc.tags.slice(0, 3).map(tag => (
                        <span key={tag} className="bg-slate-100 dark:bg-slate-600 px-2 py-1 rounded">
                          {tag}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {filteredDocuments.length === 0 && (
              <div className="text-center py-12">
                <div className="text-4xl mb-4">üìÑ</div>
                <p className="text-slate-500 dark:text-slate-400">
                  {searchQuery || selectedTags.length > 0
                    ? "–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞."
                    : "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç!"
                  }
                </p>
              </div>
            )}
          </div>
        )}

        {/* AI Chat View */}
        {activeView === "ai-chat" && (
          <div className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md rounded-xl border border-white/20 dark:border-slate-700 h-[600px] flex flex-col">
            <div className="p-6 border-b border-white/20 dark:border-slate-700">
              <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100 flex items-center space-x-2">
                <span>ü§ñ</span>
                <span>AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</span>
                <span className="ml-auto bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200 px-2 py-1 rounded-full text-xs">
                  Online
                </span>
              </h3>
            </div>

            <div className="flex-1 overflow-y-auto p-6 space-y-4">
              {aiMessages.map((message) => (
                <div
                  key={message.id}
                  className={`flex ${message.type === "user" ? "justify-end" : "justify-start"}`}
                >
                  <div
                    className={`max-w-[80%] p-4 rounded-2xl ${
                      message.type === "user"
                        ? "bg-indigo-600 text-white ml-auto"
                        : "bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100 border border-slate-200 dark:border-slate-600"
                    }`}
                  >
                    <p className="text-sm">{message.content}</p>
                    <p className={`text-xs mt-2 opacity-70 ${
                      message.type === "user" ? "text-indigo-100" : "text-slate-500 dark:text-slate-400"
                    }`}>
                      {new Date(message.timestamp).toLocaleTimeString('ru-RU')}
                    </p>
                  </div>
                </div>
              ))}

              {isTyping && (
                <div className="flex justify-start">
                  <div className="bg-white dark:bg-slate-700 p-4 rounded-2xl border border-slate-200 dark:border-slate-600">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce" style={{ animationDelay: "0.1s" }}></div>
                      <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce" style={{ animationDelay: "0.2s" }}></div>
                    </div>
                  </div>
                </div>
              )}
            </div>

            <div className="p-6 border-t border-white/20 dark:border-slate-700">
              <div className="flex space-x-4">
                <input
                  type="text"
                  value={aiInput}
                  onChange={(e) => setAiInput(e.target.value)}
                  onKeyPress={(e) => e.key === "Enter" && sendAIMessage()}
                  placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ AI –æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∑–∞–¥–∞—á–∞—Ö –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–≤–µ—Ç—ã..."
                  className="flex-1 px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-slate-700 dark:text-slate-100"
                />
                <button
                  onClick={sendAIMessage}
                  disabled={!aiInput.trim() || isTyping}
                  className="px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:bg-slate-300 disabled:cursor-not-allowed transition-colors"
                >
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </button>
              </div>
              <div className="mt-2 flex flex-wrap gap-2">
                {["–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "–°–æ–≤–µ—Ç—ã –ø–æ –∑–∞–¥–∞—á–∞–º", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã"].map((suggestion) => (
                  <button
                    key={suggestion}
                    onClick={() => {
                      setAiInput(suggestion);
                      setTimeout(() => sendAIMessage(), 100);
                    }}
                    className="text-xs bg-slate-100 dark:bg-slate-600 text-slate-700 dark:text-slate-300 px-3 py-1 rounded-full hover:bg-slate-200 dark:hover:bg-slate-500 transition-colors"
                  >
                    {suggestion}
                  </button>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Voice Notes View */}
        {activeView === "voice" && (
          <div className="space-y-6">
            <div className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md rounded-xl p-6 border border-white/20 dark:border-slate-700">
              <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4">
                üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏ —Å AI —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
              </h3>
              
              <div className="text-center">
                {isRecording ? (
                  <div className="space-y-4">
                    <div className="inline-flex items-center space-x-3 bg-red-50 dark:bg-red-900/20 px-6 py-4 rounded-xl">
                      <div className="w-4 h-4 bg-red-500 rounded-full animate-pulse"></div>
                      <span className="text-red-700 dark:text-red-300 font-medium">
                        –ó–∞–ø–∏—Å—å: {formatTime(recordingTime)}
                      </span>
                    </div>
                    <button
                      onClick={stopRecording}
                      className="bg-red-600 text-white px-8 py-3 rounded-lg font-medium hover:bg-red-700 transition-colors"
                    >
                      üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
                    </button>
                  </div>
                ) : (
                  <button
                    onClick={startRecording}
                    className="bg-indigo-600 text-white px-8 py-3 rounded-lg font-medium hover:bg-indigo-700 transition-colors"
                  >
                    üéôÔ∏è –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
                  </button>
                )}
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {voiceNotes.map((note) => (
                <div
                  key={note.id}
                  className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md rounded-xl p-6 border border-white/20 dark:border-slate-700"
                >
                  <div className="flex items-start justify-between mb-4">
                    <h4 className="font-semibold text-slate-900 dark:text-slate-100">
                      {note.title}
                    </h4>
                    <span className="text-sm text-slate-500 dark:text-slate-400">
                      {formatTime(note.duration)}
                    </span>
                  </div>

                  <div className="mb-4 p-3 bg-slate-50 dark:bg-slate-700 rounded-lg">
                    <p className="text-sm text-slate-700 dark:text-slate-300">
                      {note.transcript}
                    </p>
                  </div>

                  <div className="flex items-center justify-between text-xs text-slate-500 dark:text-slate-400">
                    <span>{new Date(note.createdAt).toLocaleDateString('ru-RU')}</span>
                    <div className="flex space-x-1">
                      {note.tags.map(tag => (
                        <span key={tag} className="bg-slate-100 dark:bg-slate-600 px-2 py-1 rounded">
                          {tag}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {voiceNotes.length === 0 && (
              <div className="text-center py-12">
                <div className="text-4xl mb-4">üéôÔ∏è</div>
                <p className="text-slate-500 dark:text-slate-400">
                  –ü–æ–∫–∞ –Ω–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–º–µ—Ç–æ–∫. –ó–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—É—é!
                </p>
              </div>
            )}
          </div>
        )}

        {/* Analytics View */}
        {activeView === "analytics" && (
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              <div className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md rounded-xl p-6 border border-white/20 dark:border-slate-700">
                <h4 className="font-semibold text-slate-900 dark:text-slate-100 mb-4">üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-slate-600 dark:text-slate-400">–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</span>
                    <span className="font-medium text-green-600">{stats.completionRate.toFixed(0)}%</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-slate-600 dark:text-slate-400">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</span>
                    <span className="font-medium text-blue-600">–í—ã—Å–æ–∫–∞—è</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-slate-600 dark:text-slate-400">–§–æ–∫—É—Å:</span>
                    <span className="font-medium text-purple-600">87%</span>
                  </div>
                </div>
              </div>

              <div className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md rounded-xl p-6 border border-white/20 dark:border-slate-700">
                <h4 className="font-semibold text-slate-900 dark:text-slate-100 mb-4">üéØ –ó–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º</h4>
                <div className="space-y-3">
                  {[
                    { status: "todo", label: "–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é", color: "bg-slate-500" },
                    { status: "in-progress", label: "–í —Ä–∞–±–æ—Ç–µ", color: "bg-blue-500" },
                    { status: "review", label: "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", color: "bg-yellow-500" },
                    { status: "done", label: "–ì–æ—Ç–æ–≤–æ", color: "bg-green-500" }
                  ].map((item) => {
                    const count = tasks.filter(t => t.status === item.status).length;
                    const percentage = tasks.length > 0 ? (count / tasks.length) * 100 : 0;
                    return (
                      <div key={item.status}>
                        <div className="flex justify-between text-sm mb-1">
                          <span className="text-slate-600 dark:text-slate-400">{item.label}</span>
                          <span className="font-medium text-slate-900 dark:text-slate-100">{count}</span>
                        </div>
                        <div className="w-full bg-slate-200 dark:bg-slate-600 rounded-full h-2">
                          <div
                            className={`${item.color} h-2 rounded-full transition-all duration-300`}
                            style={{ width: `${percentage}%` }}
                          ></div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>

              <div className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md rounded-xl p-6 border border-white/20 dark:border-slate-700">
                <h4 className="font-semibold text-slate-900 dark:text-slate-100 mb-4">üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h4>
                <div className="space-y-3">
                  <div className="flex items-center space-x-3">
                    <span className="text-2xl">üéØ</span>
                    <div>
                      <p className="text-sm font-medium text-slate-900 dark:text-slate-100">–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</p>
                      <p className="text-xs text-slate-500 dark:text-slate-400">–ó–∞–≤–µ—Ä—à–µ–Ω–æ {stats.completedTasks} –∑–∞–¥–∞—á</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-3">
                    <span className="text-2xl">üìù</span>
                    <div>
                      <p className="text-sm font-medium text-slate-900 dark:text-slate-100">–î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç</p>
                      <p className="text-xs text-slate-500 dark:text-slate-400">–°–æ–∑–¥–∞–Ω–æ {stats.totalDocs} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-3">
                    <span className="text-2xl">üéôÔ∏è</span>
                    <div>
                      <p className="text-sm font-medium text-slate-900 dark:text-slate-100">–ì–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏</p>
                      <p className="text-xs text-slate-500 dark:text-slate-400">{stats.voiceNotesCount} –∑–∞–ø–∏—Å–µ–π</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md rounded-xl p-6 border border-white/20 dark:border-slate-700">
              <h4 className="font-semibold text-slate-900 dark:text-slate-100 mb-4">ü§ñ AI –ò–Ω—Å–∞–π—Ç—ã –∏ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h4>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h5 className="font-medium text-slate-900 dark:text-slate-100 mb-3">–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h5>
                  <div className="space-y-3">
                    <div className="p-3 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800">
                      <p className="text-sm text-green-700 dark:text-green-300">
                        ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
                      </p>
                    </div>
                    <div className="p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
                      <p className="text-sm text-blue-700 dark:text-blue-300">
                        üìä –ü–∏–∫–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã
                      </p>
                    </div>
                  </div>
                </div>
                <div>
                  <h5 className="font-medium text-slate-900 dark:text-slate-100 mb-3">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h5>
                  <div className="space-y-3">
                    <div className="p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg border border-yellow-200 dark:border-yellow-800">
                      <p className="text-sm text-yellow-700 dark:text-yellow-300">
                        üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —É—Ç—Ä–æ
                      </p>
                    </div>
                    <div className="p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg border border-purple-200 dark:border-purple-800">
                      <p className="text-sm text-purple-700 dark:text-purple-300">
                        üéØ –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–¥–∞—á –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Dashboard View */}
        {activeView === "dashboard" && (
          <div className="space-y-6">
            {/* Stats Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md rounded-xl p-6 border border-white/20 dark:border-slate-700">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-slate-600 dark:text-slate-400">–í—Å–µ–≥–æ –∑–∞–¥–∞—á</p>
                    <p className="text-3xl font-bold text-slate-900 dark:text-slate-100">{stats.totalTasks}</p>
                    <p className="text-xs text-green-600">+{tasks.filter(t => {
                      const today = new Date().toDateString();
                      return new Date(t.createdAt).toDateString() === today;
                    }).length} —Å–µ–≥–æ–¥–Ω—è</p>
                  </div>
                  <div className="text-3xl">‚úÖ</div>
                </div>
              </div>

              <div className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md rounded-xl p-6 border border-white/20 dark:border-slate-700">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-slate-600 dark:text-slate-400">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</p>
                    <p className="text-3xl font-bold text-green-600">{stats.completedTasks}</p>
                    <p className="text-xs text-slate-500">{stats.completionRate.toFixed(1)}% –æ—Ç –æ–±—â–µ–≥–æ</p>
                  </div>
                  <div className="text-3xl">üéØ</div>
                </div>
              </div>

              <div className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md rounded-xl p-6 border border-white/20 dark:border-slate-700">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-slate-600 dark:text-slate-400">–î–æ–∫—É–º–µ–Ω—Ç–æ–≤</p>
                    <p className="text-3xl font-bold text-slate-900 dark:text-slate-100">{stats.totalDocs}</p>
                    <p className="text-xs text-blue-600">+{stats.todayDocs} —Å–µ–≥–æ–¥–Ω—è</p>
                  </div>
                  <div className="text-3xl">üìù</div>
                </div>
              </div>

              <div className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md rounded-xl p-6 border border-white/20 dark:border-slate-700">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-slate-600 dark:text-slate-400">–ì–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏</p>
                    <p className="text-3xl font-bold text-slate-900 dark:text-slate-100">{stats.voiceNotesCount}</p>
                    <p className="text-xs text-purple-600">AI —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</p>
                  </div>
                  <div className="text-3xl">üéôÔ∏è</div>
                </div>
              </div>
            </div>

            {/* Recent Activity */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md rounded-xl border border-white/20 dark:border-slate-700">
                <div className="p-6 border-b border-white/20 dark:border-slate-700">
                  <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">
                    –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏
                  </h3>
                </div>
                <div className="p-6">
                  {tasks.slice(0, 5).length === 0 ? (
                    <p className="text-center text-slate-500 dark:text-slate-400 py-8">
                      –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!
                    </p>
                  ) : (
                    <div className="space-y-3">
                      {tasks.slice(0, 5).map((task) => (
                        <div key={task.id} className="flex items-center justify-between p-3 bg-white/50 dark:bg-slate-700/50 rounded-lg">
                          <div className="flex items-center space-x-3">
                            <div className={`w-3 h-3 rounded-full ${getPriorityColor(task.priority)}`}></div>
                            <div>
                              <p className="font-medium text-slate-900 dark:text-slate-100 text-sm">
                                {task.title}
                              </p>
                              <p className="text-xs text-slate-500 dark:text-slate-400">
                                {new Date(task.createdAt).toLocaleDateString('ru-RU')}
                              </p>
                            </div>
                          </div>
                          <span className={`px-2 py-1 rounded text-xs font-medium ${getStatusColor(task.status)}`}>
                            {task.status}
                          </span>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </div>

              <div className="bg-white/70 dark:bg-slate-800/70 backdrop-blur-md rounded-xl border border-white/20 dark:border-slate-700">
                <div className="p-6 border-b border-white/20 dark:border-slate-700">
                  <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">
                    AI –ò–Ω—Å–∞–π—Ç—ã
                  </h3>
                </div>
                <div className="p-6">
                  <div className="space-y-4">
                    <div className="p-4 bg-gradient-to-r from-indigo-50 to-purple-50 dark:from-indigo-900/20 dark:to-purple-900/20 rounded-lg border border-indigo-200 dark:border-indigo-800">
                      <div className="flex items-start space-x-2">
                        <span className="text-lg">ü§ñ</span>
                        <div>
                          <p className="text-sm font-medium text-indigo-900 dark:text-indigo-200">
                            –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                          </p>
                          <p className="text-xs text-indigo-700 dark:text-indigo-300 mt-1">
                            {aiResponses.insights[0]}
                          </p>
                        </div>
                      </div>
                    </div>
                    
                    <div className="p-4 bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-lg border border-green-200 dark:border-green-800">
                      <div className="flex items-start space-x-2">
                        <span className="text-lg">üí°</span>
                        <div>
                          <p className="text-sm font-medium text-green-900 dark:text-green-200">
                            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
                          </p>
                          <p className="text-xs text-green-700 dark:text-green-300 mt-1">
                            {aiResponses.suggestions[0]}
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Document Form Modal */}
        {showDocumentForm && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white dark:bg-slate-800 rounded-xl p-6 w-full max-w-2xl border border-slate-200 dark:border-slate-700">
              <h3 className="text-xl font-semibold text-slate-900 dark:text-slate-100 mb-4">
                –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
              </h3>
              
              <div className="space-y-4">
                <input
                  type="text"
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
                  value={documentForm.title}
                  onChange={(e) => setDocumentForm({...documentForm, title: e.target.value})}
                  className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-slate-700 dark:text-slate-100"
                />

                <div className="grid grid-cols-2 gap-4">
                  <select
                    value={documentForm.type}
                    onChange={(e) => setDocumentForm({...documentForm, type: e.target.value as Document["type"]})}
                    className="px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-slate-700 dark:text-slate-100"
                  >
                    <option value="note">üìù –ó–∞–º–µ—Ç–∫–∞</option>
                    <option value="task">‚úÖ –ó–∞–¥–∞—á–∞</option>
                    <option value="project">üöÄ –ü—Ä–æ–µ–∫—Ç</option>
                    <option value="idea">üí° –ò–¥–µ—è</option>
                  </select>

                  <select
                    value={documentForm.priority}
                    onChange={(e) => setDocumentForm({...documentForm, priority: e.target.value as Document["priority"]})}
                    className="px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-slate-700 dark:text-slate-100"
                  >
                    <option value="low">üü¢ –ù–∏–∑–∫–∏–π</option>
                    <option value="medium">üü° –°—Ä–µ–¥–Ω–∏–π</option>
                    <option value="high">üü† –í—ã—Å–æ–∫–∏–π</option>
                    <option value="urgent">üî¥ –°—Ä–æ—á–Ω–æ</option>
                  </select>
                </div>

                <textarea
                  placeholder="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞..."
                  rows={6}
                  value={documentForm.content}
                  onChange={(e) => setDocumentForm({...documentForm, content: e.target.value})}
                  className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-slate-700 dark:text-slate-100"
                />

                <input
                  type="text"
                  placeholder="–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"
                  value={documentForm.tags}
                  onChange={(e) => setDocumentForm({...documentForm, tags: e.target.value})}
                  className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-slate-700 dark:text-slate-100"
                />

                <div className="flex space-x-3 pt-4">
                  <button
                    onClick={() => setShowDocumentForm(false)}
                    className="flex-1 py-2 px-4 border border-slate-300 dark:border-slate-600 text-slate-700 dark:text-slate-300 rounded-lg hover:bg-slate-50 dark:hover:bg-slate-700 transition-colors"
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  <button
                    onClick={addDocument}
                    disabled={!documentForm.title.trim()}
                    className="flex-1 py-2 px-4 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:bg-slate-300 disabled:cursor-not-allowed transition-colors"
                  >
                    –°–æ–∑–¥–∞—Ç—å
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Task Form Modal */}
        {showTaskForm && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white dark:bg-slate-800 rounded-xl p-6 w-full max-w-2xl border border-slate-200 dark:border-slate-700">
              <h3 className="text-xl font-semibold text-slate-900 dark:text-slate-100 mb-4">
                –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
              </h3>
              
              <div className="space-y-4">
                <input
                  type="text"
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
                  value={taskForm.title}
                  onChange={(e) => setTaskForm({...taskForm, title: e.target.value})}
                  className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 dark:bg-slate-700 dark:text-slate-100"
                />

                <textarea
                  placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏..."
                  rows={4}
                  value={taskForm.description}
                  onChange={(e) => setTaskForm({...taskForm, description: e.target.value})}
                  className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 dark:bg-slate-700 dark:text-slate-100"
                />

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <select
                    value={taskForm.priority}
                    onChange={(e) => setTaskForm({...taskForm, priority: e.target.value as Task["priority"]})}
                    className="px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 dark:bg-slate-700 dark:text-slate-100"
                  >
                    <option value="low">üü¢ –ù–∏–∑–∫–∏–π</option>
                    <option value="medium">üü° –°—Ä–µ–¥–Ω–∏–π</option>
                    <option value="high">üü† –í—ã—Å–æ–∫–∏–π</option>
                    <option value="urgent">üî¥ –°—Ä–æ—á–Ω–æ</option>
                  </select>

                  <input
                    type="date"
                    value={taskForm.dueDate}
                    onChange={(e) => setTaskForm({...taskForm, dueDate: e.target.value})}
                    className="px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 dark:bg-slate-700 dark:text-slate-100"
                  />

                  <input
                    type="number"
                    placeholder="–ß–∞—Å—ã"
                    value={taskForm.estimatedTime}
                    onChange={(e) => setTaskForm({...taskForm, estimatedTime: e.target.value})}
                    className="px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 dark:bg-slate-700 dark:text-slate-100"
                  />
                </div>

                <input
                  type="text"
                  placeholder="–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"
                  value={taskForm.tags}
                  onChange={(e) => setTaskForm({...taskForm, tags: e.target.value})}
                  className="w-full px-4 py-2 border border-slate-300 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 dark:bg-slate-700 dark:text-slate-100"
                />

                <div className="flex space-x-3 pt-4">
                  <button
                    onClick={() => setShowTaskForm(false)}
                    className="flex-1 py-2 px-4 border border-slate-300 dark:border-slate-600 text-slate-700 dark:text-slate-300 rounded-lg hover:bg-slate-50 dark:hover:bg-slate-700 transition-colors"
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  <button
                    onClick={addTask}
                    disabled={!taskForm.title.trim()}
                    className="flex-1 py-2 px-4 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:bg-slate-300 disabled:cursor-not-allowed transition-colors"
                  >
                    –°–æ–∑–¥–∞—Ç—å
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Tech Info */}
        <div className="mt-8 text-center">
          <p className="text-xs text-slate-500 dark:text-slate-400">
            –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: Advanced React Patterns, AI Simulation, Voice API, Drag & Drop, Complex State Management, Real-time Updates
          </p>
        </div>
      </div>
    </div>
  );
}
